/*
 * program5.ypp
 * Finley McIlwaine
 * Nov. 26, 2019
 * COSC4785, Program 5
 *
 * Bison grammar input file
*/
%{
#include <iostream>
#include "Error.hpp"
#include "Node.hpp"
#include "MyScanner.hpp"
#include "Symbol.hpp"
#include "SymbolTable.hpp"
  
using std::cout;
using std::endl;
using std::cerr;

extern Node* tree;
extern MyScanner scanner;
extern SymbolTable* root;
extern SymbolTable* cur;

Symbol* sym;

Error* err=new Error();

#define yylex() scanner.yylex()
#define YYERROR_VERBOSE 1

void yyerror(const char *);
%}

%locations

  /*
   * El Union
   */
%union {
  Node *pnode;
}

/*
 * token stuff
 */
%type<pnode> classdec
%type<pnode> classstart
%type<pnode> classbody
%type<pnode> methoddecs
%type<pnode> constructordecs
%type<pnode> vardecs
%type<pnode> vardec
%type<pnode> constructordec
%type<pnode> methoddec
%type<pnode> parameterlist
%type<pnode> parameter
%type<pnode> block
%type<pnode> localvardecs
%type<pnode> stmts
%type<pnode> localvardec
%type<pnode> stmt
%type<pnode> conditionalstmt
%type<pnode> name
%type<pnode> program
%type<pnode> simpletype
%type<pnode> type
%type<pnode> arglist
%type<pnode> newexp
%type<pnode> exp
%type<pnode> multibrackets
%type<pnode> bracketexp
%type<pnode> bracketexps
%type<pnode> idbrack

%token<pnode> VOID
%token<pnode> CLASS
%token<pnode> RETURN
%token<pnode> WHILE
%token<pnode> PRINT
%token<pnode> SEMI
%token<pnode> ELSE
%token<pnode> IF
%token<pnode> ASSIGN
%token<pnode> READ
%token<pnode> NULLT
%token<pnode> DOT
%token<pnode> THIS
%token<pnode> INT
%token<pnode> NEW
%token<pnode> COMMA
%token<pnode> NUMBER
%token<pnode> ID
%token<pnode> RBRACK LPAREN RPAREN LBRACE
%left<pnode> EQ NE LE GE LT GT
%left<pnode> PLUS MINUS OR
%left<pnode> TIMES DIV MOD AND
%token<pnode> NOT

%precedence UNARYOP
%precedence IF
%precedence ELSE
%precedence<pnode> LBRACK RBRACE
/*
 * The Grammar :o
 */
%%
input: program {
  tree=new Node($1);
}

;

program: program classdec {
  $$=new ProgramNode($1,$2);
  $$->setVal("<Program> <ClassDec>");
}
| classdec {
  $$=new ProgramNode($1);
  $$->setVal("<ClassDec>");
}
| error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ProgramNode();
  $$->setVal("<Error>");
}

; /* do not ever even think about forgetting this stupid thing */ 

classdec: classstart classbody {
  $$=new ClassDecNode($1,$2);
  $$->setVal("<ClassStart> <ClassBody>");
}
| classstart error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassDecNode($1);
  $$->setVal("<ClassStart> <Error>");
}

;

classstart: CLASS ID {
  $$=new ClassStartNode($2);
  $$->setVal("class identifier");
  // Create a symbol for the class
  sym=new ClassSymbol();
  sym->withName($2->getString())->
    withLineNumber(@2.first_line);

  // Put it in the root table
  root->insert(*sym);
  delete sym;
  // Then make the current symbol table the class' symbol table
  cur=new SymbolTable(); 
} 
| CLASS error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassStartNode();
  $$->setVal("class <Error>");
}

;

classbody: LBRACE vardecs constructordecs methoddecs RBRACE {
  $$=new ClassBodyNode($2,$3,$4);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> <MethodDecs> rbrace");
}
| error vardecs constructordecs methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3,$4);
  $$->setVal("<Error> <VarDecs> <ConstructorDecs> <MethodDecs> rbrace");
}
| error error constructordecs methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3,$4);
  $$->setVal("<Error> <Error> <ConstructorDecs> <MethodDecs> rbrace");
}
| error vardecs error methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$4);
  $$->setVal("<Error> <VarDecs> <Error> <MethodDecs> rbrace");
}
| error vardecs constructordecs error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("<Error> <VarDecs> <ConstructorDecs> <Error> rbrace");
}
| error vardecs constructordecs methoddecs error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3,$4);
  $$->setVal("<Error> <VarDecs> <ConstructorDecs> <MethodDecs> <Error>");
}
| LBRACE error error methoddecs RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($4);
  $$->setVal("lbrace <Error> <Error> <MethodDecs> rbrace");
}
| LBRACE error constructordecs error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("lbrace <Error> <ConstructorDecs> <Error> rbrace");
}
| LBRACE error constructordecs methoddecs error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3,$4);
  $$->setVal("lbrace <Error> <ConstructorDecs> <MethodDecs> <Error>");
}
| LBRACE vardecs error error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <VarDecs> <Error> <Error> rbrace");
}
| LBRACE vardecs error methoddecs error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$4);
  $$->setVal("lbrace <VarDecs> <Error> <MethodDecs> <Error>");
}
| LBRACE vardecs constructordecs error error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> <Error> <Error>");
}
| error error error methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($4);
  $$->setVal("<Error> <Error> <Error> <MethodDecs> rbrace");
}
| error error constructordecs error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("<Error> <Error> <ConstructorDecs> <Error> rbrace");
}
| error vardecs error error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("<Error> <VarDecs> <Error> <Error> rbrace");
}
| LBRACE error error error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("lbrace <Error> <Error> <Error> rbrace");
}
| error vardecs error methoddecs error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$4);
  $$->setVal("<Error> <VarDecs> <Error> <MethodDecs> <Error>");
}
| LBRACE error error methoddecs error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($4);
  $$->setVal("lbrace <Error> <Error> <MethodDecs> <Error>");
}
| LBRACE error constructordecs error error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("lbrace <Error> <ConstructorDecs> <Error> <Error>");
}
| LBRACE vardecs error error error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <VarDecs> <Error> <Error> <Error>");
}
| error error error error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("<Error> <Error> <Error> <Error> rbrace");
}
| error error error methoddecs error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($4);
  $$->setVal("<Error> <Error> <Error> <MethodDecs> <Error>");
}
| error error constructordecs error error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("<Error> <Error> <ConstructorDecs> <Error> <Error>");
}
| error vardecs error error error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("<Error> <VarDecs> <Error> <Error> <Error>");
}
| LBRACE error error error error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("lbrace <Error> <Error> <Error> <Error>");
}
| error error error error error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("<Error> <Error> <Error> <Error> <Error>");
}
| LBRACE error constructordecs methoddecs RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3,$4);
  $$->setVal("lbrace <Error> <ConstructorDecs> <MethodDecs> rbrace");
}
| LBRACE vardecs error methoddecs RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$4);
  $$->setVal("lbrace <VarDecs> <Error> <MethodDecs> rbrace");
}
| LBRACE vardecs constructordecs error RBRACE {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> <Error> rbrace");
}
| LBRACE vardecs constructordecs methoddecs error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3,$4);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> <MethodDecs> <Error>");
}
| LBRACE vardecs constructordecs RBRACE {
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> rbrace");
}
| LBRACE vardecs methoddecs RBRACE {
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <VarDecs> <MethodDecs> rbrace");
}
| LBRACE vardecs error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <VarDecs> <Error> rbrace");
}
| LBRACE vardecs RBRACE {
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <VarDecs> rbrace");
}
| LBRACE constructordecs methoddecs RBRACE {
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <ConstructorDecs> <MethodDecs> rbrace");
}
| error constructordecs methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("<Error> <ConstructorDecs> <MethodDecs> rbrace");
}
| LBRACE error methoddecs RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("lbrace <Error> <MethodDecs> rbrace");
}
| LBRACE constructordecs error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <ConstructorDecs> <Error> rbrace");
}
| LBRACE constructordecs methoddecs error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <ConstructorDecs> <MethodDecs> <Error>");
}
| LBRACE constructordecs RBRACE {
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <ConstructorDecs> rbrace");
}
| LBRACE methoddecs RBRACE {
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <MethodDecs> rbrace");
}
| LBRACE error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("lbrace <Error> rbrace");
}
| LBRACE methoddecs error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <MethodDecs> <Error>");
}
| error methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("<Error> <MethodDecs> rbrace");
}
| LBRACE constructordecs error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <ConstructorDecs> <Error>");
}
| error constructordecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("<Error> <ConstructorDecs> rbrace");
}
| LBRACE RBRACE {
  $$=new ClassBodyNode();
  $$->setVal("lbrace rbrace");
}
| error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("<Error> rbrace");
}
| LBRACE error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("lbrace <Error>");
}

;

vardecs: vardecs vardec {
  $$=new VarDecsNode($1,$2);
  $$->setVal("<VarDecs> <VarDec>");
}
| vardec {
  $$=new VarDecsNode($1);
  $$->setVal("<VarDec>");
}
;

vardec: type ID SEMI {
  $$=new VarDecNode($1,$2);
  $$->setVal("<Type> identifier semi");
}
| type error SEMI {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new VarDecNode($1);
  $$->setVal("<Type> <Error> semi");
}
| type ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new VarDecNode($1,$2);
  $$->setVal("<Type> identifier <Error>");
}
| idbrack ID SEMI {
  $$=new VarDecNode($1,$2);
  $$->setVal("<IdBrack> identifier semi");
}
| idbrack error SEMI {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new VarDecNode($1);
  $$->setVal("<IdBrack> <Error> semi");
}
| idbrack ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new VarDecNode($1,$2);
  $$->setVal("<IdBrack> identifier <Error>");
}

;

type: simpletype {
  $$=new TypeNode($1);
  $$->setVal("<SimpleType>");
}
| type LBRACK RBRACK {
  $$=new TypeNode($1);
  $$->setVal("<Type> lbrack rbrack");
}
| type error RBRACK {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new TypeNode($1);
  $$->setVal("<Type> <Error> rbrack");
}
| type LBRACK error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new TypeNode($1);
  $$->setVal("<Type> lbrack <Error>");
}

;

simpletype: INT {
  $$=new SimpleTypeNode();
  $$->setVal("int");
}

;

constructordecs: constructordecs constructordec {
  $$=new ConstructorDecsNode($1,$2);
  $$->setVal("<ConstructorDecs> <ConstructorDec>");
}
| constructordec {
  $$=new ConstructorDecsNode($1);
  $$->setVal("<ConstructorDec>");
}
;

constructordec: ID LPAREN parameterlist RPAREN block {
  $$=new ConstructorDecNode($1,$3,$5);
  $$->setVal("identifier lparen <ParameterList> rparen <Block>");
}
| ID LPAREN RPAREN block {
  $$=new ConstructorDecNode($1,$4);
  $$->setVal("identifier lparen rparen <Block>");
}
| ID LPAREN error RPAREN block {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ConstructorDecNode($1,$5);
  $$->setVal("identifier lparen <Error> rparen <Block>");
}
| ID LPAREN error block {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ConstructorDecNode($1,$4);
  $$->setVal("identifier lparen <Error> <Block>");
}
| ID LPAREN parameterlist RPAREN error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConstructorDecNode($1,$3);
  $$->setVal("identifier lparen <ParameterList> rparen <Error>");
}
| ID LPAREN error RPAREN error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConstructorDecNode($1);
  $$->setVal("identifier lparen <Error> rparen <Error>");
}

;

methoddecs: methoddecs methoddec {
  $$=new MethodDecsNode($1,$2);
  $$->setVal("<MethodDecs> <MethodDec>");
}
| methoddecs error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new MethodDecsNode($1);
  $$->setVal("<MethodDecs> <Error>");
}
| methoddec {
  $$=new MethodDecsNode($1);
  $$->setVal("<MethodDec>");
}

;

methoddec: type ID LPAREN parameterlist RPAREN block {
  $$=new MethodDecNode($1,$2,$4,$6);
  $$->setVal("<Type> identifier lparen <ParameterList> rparen <Block>");
}
| type error LPAREN parameterlist RPAREN block {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$4,$6);
  $$->setVal("<Type> <Error> lparen <ParameterList> rparen <Block>");
}
| type error LPAREN error RPAREN block {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$6);
  $$->setVal("<Type> <Error> lparen <Error> rparen <Block>");
}
| type error LPAREN error RPAREN error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@6.first_column)->withLineNumber(@6.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1);
  $$->setVal("<Type> <Error> lparen <Error> rparen <Error>");
}
| type ID LPAREN parameterlist error block {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$4,$6);
  $$->setVal("<Type> identifier lparen <ParameterList> <Error> <Block>");
}
| type ID LPAREN error RPAREN block {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$2,$6);
  $$->setVal("<Type> identifier lparen <Error> rparen <Block>");
}
| type ID LPAREN parameterlist RPAREN error {
  err->withColNumber(@6.first_column)->withLineNumber(@6.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$2,$4);
  $$->setVal("<Type> identifier lparen <ParameterList> rparen <Error>");
}
| type ID LPAREN error RPAREN error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@6.first_column)->withLineNumber(@6.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$2);
  $$->setVal("<Type> identifier lparen <Error> rparen <Error>");
}
| type ID LPAREN RPAREN block {
  $$=new MethodDecNode($1,$2,$5);
  $$->setVal("<Type> identifier lparen rparen <Block>");
}
| type ID LPAREN error block {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$2,$5);
  $$->setVal("<Type> identifier lparen <Error> <Block>");
}
| type ID error block {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$2,$4);
  $$->setVal("<Type> identifier <Error> <Block>");
}
| VOID ID LPAREN parameterlist RPAREN block {
  $$=new MethodDecNode($2,$4,$6);
  $$->setVal("VOID identifier lparen <ParameterList> rparen <Block>");
}
| VOID error LPAREN parameterlist RPAREN block {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($4,$6);
  $$->setVal("void <Error> lparen <ParameterList> rparen <Block>");
}
| VOID ID error parameterlist RPAREN block {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($2,$4,$6);
  $$->setVal("void identifier <Error> <ParameterList> rparen <Block>");
}
| VOID ID LPAREN error RPAREN block {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($2,$6);
  $$->setVal("void identifier lparen <Error> rparen <Block>");
}
| VOID ID LPAREN parameterlist error block {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($2,$4,$6);
  $$->setVal("void identifier lparen <ParameterList> <Error> <Block>");
}
| VOID ID LPAREN parameterlist RPAREN error {
  err->withColNumber(@6.first_column)->withLineNumber(@6.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($2,$4);
  $$->setVal("void identifier lparen <ParameterList> rparen <Error>");
}
| VOID error LPAREN error RPAREN error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@6.first_column)->withLineNumber(@6.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode();
  $$->setVal("void <Error> lparen <Error> rparen <Error>");
}
| idbrack ID LPAREN parameterlist RPAREN block {
  $$=new MethodDecNode($1,$2,$4,$6);
  $$->setVal("<IdBrack> identifier lparen <ParameterList> rparen <Block>");
}
| idbrack error LPAREN parameterlist RPAREN block {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$4,$6);
  $$->setVal("<IdBrack> <Error> lparen <ParameterList> rparen <Block>");
}
| idbrack ID LPAREN error RPAREN block {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$2,$6);
  $$->setVal("<IdBrack> identifier lparen <Error> rparen <Block>");
}
| idbrack ID LPAREN parameterlist error block {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$2,$4,$6);
  $$->setVal("<IdBrack> identifier lparen <ParameterList> <Error> <Block>");
}
| idbrack ID LPAREN parameterlist RPAREN error {
  err->withColNumber(@6.first_column)->withLineNumber(@6.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($1,$2,$4);
  $$->setVal("<IdBrack> identifier lparen <ParameterList> rparen <Error>");
}

;

parameterlist: parameter {
  $$=new ParameterListNode($1);
  $$->setVal("<Parameter>");
}
| parameterlist COMMA parameter {
  $$=new ParameterListNode($1,$3);
  $$->setVal("<ParameterList> comma <Exp>");
}
| error COMMA parameter {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ParameterListNode($3);
  $$->setVal("<Error> comma <Exp>");
}
| parameterlist COMMA error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ParameterListNode($1);
  $$->setVal("<ParameterList> comma <Error>");
}

;

parameter: type ID {
  $$=new ParameterNode($1,$2);
  $$->setVal("<Type> identifier");
}
| idbrack ID {
  $$=new ParameterNode($1,$2);
  $$->setVal("<IdBrack> identifier");
}

;

block: LBRACE localvardecs stmts RBRACE {
  $$=new BlockNode($2,$3);
  $$->setVal("lbrace <LocalVarDecs> <Stmts> rbrace");
}
| LBRACE error stmts RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new BlockNode($3);
  $$->setVal("lbrace <Error> <Stmts> rbrace");
}
| LBRACE localvardecs error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new BlockNode($2);
  $$->setVal("lbrace <LocalVarDecs> <Error> rbrace");
}
| LBRACE error error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new BlockNode();
  $$->setVal("lbrace <Error> <Error> rbrace");
}
| LBRACE localvardecs RBRACE {
  $$=new BlockNode($2);
  $$->setVal("lbrace <LocalVarDecs> rbrace");
}
| LBRACE stmts RBRACE {
  $$=new BlockNode($2);
  $$->setVal("lbrace <Stmts> rbrace");
}
| LBRACE error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new BlockNode();
  $$->setVal("lbrace <Error> rbrace");
}
| LBRACE RBRACE {
  $$=new BlockNode();
  $$->setVal("lbrace rbrace");
}

;

localvardecs: localvardecs localvardec {
  $$=new LocalVarDecsNode($1,$2);
  $$->setVal("<LocalVarDecs> <LocalVarDec>");
}
| localvardecs error %prec IF {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1);
  $$->setVal("<LocalVarDecs> <Error>");
}
| localvardec {
  $$=new LocalVarDecsNode($1);
  $$->setVal("<LocalVarDec>");
}

;

localvardec: type ID SEMI {
  $$=new LocalVarDecNode($1,$2);
  $$->setVal("<Type> identifier semi");
}
| type error SEMI {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1);
  $$->setVal("<Type> <Error> semi");
}
| type ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1,$2);
  $$->setVal("<Type> identifier <Error>");
}
| idbrack ID SEMI {
  $$=new LocalVarDecNode($1,$2);
  $$->setVal("<IdBrack> identifier semi");
}
| idbrack error SEMI {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1);
  $$->setVal("<IdBrack> <Error> semi");
}
| idbrack ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1,$2);
  $$->setVal("<IdBrack> identifier <Error>");
}

;

stmts: stmts stmt {
  $$=new StmtsNode($1,$2);
  $$->setVal("<Stmts> <Stmt>");
}
| stmts error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new StmtsNode($1);
  $$->setVal("<Stmts> <Error>");
}
| stmt {
  $$=new StmtsNode($1);
  $$->setVal("<Stmt>");
}

;

stmt: SEMI {
  $$=new StmtNode();
  $$->setVal("semi");
}
| name ASSIGN exp SEMI {
  $$=new StmtNode($1,$3);
  $$->setVal("<Name> assign <Exp> semi");
}
| error ASSIGN exp SEMI {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new StmtNode($3);
  $$->setVal("<Error> assign <Exp> semi");
}
| name ASSIGN error SEMI {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1);
  $$->setVal("<Name> assign <Error> semi");
}
| name ASSIGN exp error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1,$3);
  $$->setVal("<Name> assign <Exp> <Error>");
}
| name LPAREN arglist RPAREN SEMI {
  $$=new StmtNode($1,$3);
  $$->setVal("<Name> lparen <ArgList> rparen semi");
}
| name LPAREN error RPAREN SEMI {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1);
  $$->setVal("<Name> lparen <Error> rparen semi");
}
| name LPAREN arglist RPAREN error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1,$3);
  $$->setVal("<Name> lparen <ArgList> rparen <Error>");
}
| PRINT LPAREN arglist RPAREN SEMI {
  $$=new StmtNode($3);
  $$->setVal("print lparen <ArgList> rparen semi");
}
| PRINT LPAREN error RPAREN SEMI {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1);
  $$->setVal("print lparen <Error> rparen semi");
}
| PRINT LPAREN arglist RPAREN error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1,$3);
  $$->setVal("print lparen <ArgList> rparen <Error>");
}
| conditionalstmt {
  $$=new StmtNode($1);
  $$->setVal("<ConditionalStmt>");
}
| WHILE LPAREN exp RPAREN stmt {
  $$=new StmtNode($3,$5);
  $$->setVal("while lparen <Exp> rparen <Stmt>");
}
| WHILE error exp RPAREN stmt {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new StmtNode($3,$5);
  $$->setVal("while <Error> <Exp> rparen <Stmt>");
}
| WHILE LPAREN error RPAREN stmt {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtNode($5);
  $$->setVal("while lparen <Error> rparen <Stmt>");
}
| WHILE LPAREN exp error stmt {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new StmtNode($3,$5);
  $$->setVal("while lparen <Exp> <Error> <Stmt>");
}
| WHILE LPAREN exp RPAREN error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new StmtNode($3);
  $$->setVal("while lparen <Exp> rparen <Error>");
}
| RETURN exp SEMI {
  $$=new StmtNode($2);
  $$->setVal("return <Exp> semi");
}
| RETURN SEMI {
  $$=new StmtNode();
  $$->setVal("return semi");
}
| RETURN error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new StmtNode();
  $$->setVal("return <Error>");
}
| block {
  $$=new StmtNode($1);
  $$->setVal("<Block>");
}

;

name: THIS {
  $$=new NameNode();
  $$->setVal("this");
}
| ID %prec IF {
  $$=new NameNode($1);
  $$->setVal("identifier");
}
| name DOT ID {
  $$=new NameNode($1,$3);
  $$->setVal("<Name> dot identifier");
}
| name DOT error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new NameNode($1);
  $$->setVal("<Name> dot <Error>");
}
| name bracketexp {
  $$=new NameNode($1,$2);
  $$->setVal("<Name> <BracketExp>");
}

;

arglist: exp {
  $$=new ArgListNode($1);
  $$->setVal("<Exp>");
}
| arglist COMMA exp {
  $$=new ArgListNode($1,$3);
  $$->setVal("<ArgList> comma <Exp>");
}
| %empty {
  $$=new ArgListNode();
  $$->setVal("empty"); /* HOW TO SHOW THIS??? */
}

;

conditionalstmt: IF LPAREN exp RPAREN stmt %prec IF {
  $$=new ConditionalStmtNode($3,$5);
  $$->setVal("if lparen <Exp> rparen <Stmt>");
}
| IF LPAREN error RPAREN stmt %prec IF {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($5);
  $$->setVal("if lparen <Error> rparen <Stmt>");
}
| IF LPAREN exp RPAREN error %prec IF {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($3);
  $$->setVal("if lparen <Exp> rparen <Error>");
}
| IF LPAREN error RPAREN error %prec IF {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode();
  $$->setVal("if lparen <Error> rparen <Error>");
}
| IF LPAREN exp RPAREN stmt ELSE stmt %prec ELSE {
  $$=new ConditionalStmtNode($3,$5,$7);
  $$->setVal("if lparen <Exp> rparen <Stmt> else <Stmt>");
}
| IF LPAREN error RPAREN stmt ELSE stmt %prec ELSE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($5,$7);
  $$->setVal("if lparen <Error> rparen <Stmt> else <Stmt>");
}
| IF LPAREN exp RPAREN error ELSE stmt %prec ELSE {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($3,$7);
  $$->setVal("if lparen <Exp> rparen <Error> else <Stmt>");
}
| IF LPAREN exp RPAREN stmt ELSE error %prec ELSE {
  err->withColNumber(@7.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($3,$5);
  $$->setVal("if lparen <Exp> rparen <Stmt> else <Error>");
}

;

exp: name {
  $$=new ExpNode($1);
  $$->setVal("<Name>");
}
| NUMBER {
  $$=new ExpNode($1);
  $$->setVal("number");
}
| NULLT {
  $$=new ExpNode();
  $$->setVal("null");
}
| name LPAREN arglist RPAREN {
  $$=new ExpNode($1,$3);
  $$->setVal("<Name> lparen <ArgList> rparen");
}
| name LPAREN error RPAREN {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ExpNode($1);
  $$->setVal("<Name> lparen <Error> rparen");
}
| READ LPAREN RPAREN {
  $$=new ExpNode();
  $$->setVal("read lparen rparen");
}
| READ error RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("read <Error> rparen");
}
| READ LPAREN error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("read lparen <Error>");
}
| newexp {
  $$=new ExpNode($1);
  $$->setVal("<NewExp>");
}
| PLUS exp %prec UNARYOP {
  $$=new ExpNode($2);
  $$->setVal("plus <Exp>");
}
| PLUS error %prec UNARYOP {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("plus <Error>");
}
| MINUS exp %prec UNARYOP {
  $$=new ExpNode($2);
  $$->setVal("minus <Exp>");
}
| MINUS error %prec UNARYOP {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("minus <Error>");
}
| NOT exp %prec UNARYOP {
  $$=new ExpNode($2);
  $$->setVal("not <Exp>");
}
| NOT error %prec UNARYOP {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("not <Error>");
}
| exp EQ exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> eq <Exp>");
}
| error EQ exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> eq <Exp>");
}
| exp NE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> ne <Exp>");
}
| error NE exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> ne <Exp>");
}
| exp LE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> le <Exp>");
}
| error LE exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> le <Exp>");
}
| exp GE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> ge <Exp>");
}
| error GE exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> ge <Exp>");
}
| exp LT exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> lt <Exp>");
}
| error LT exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> lt <Exp>");
}
| exp GT exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> gt <Exp>");
}
| error GT exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> gt <Exp>");
}
| exp PLUS exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> plus <Exp>");
}
| error PLUS exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> plus <Exp>");
}
| exp MINUS exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> minus <Exp>");
}
| error MINUS exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> minus <Exp>");
}
| exp OR exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> or <Exp>");
}
| error OR exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> or <Exp>");
}
| exp TIMES exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> times <Exp>");
}
| error TIMES exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> times <Exp>");
}
| exp DIV exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> div <Exp>");
}
| error DIV exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> div <Exp>");
}
| exp MOD exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> mod <Exp>");
}
| error MOD exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> mod <Exp>");
}
| exp AND exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> and <Exp>");
}
| error AND exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> and <Exp>");
}
| LPAREN exp RPAREN {
  $$=new ExpNode($2);
  $$->setVal("lparen <Exp> rparen");
}
| LPAREN error RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("lparen <Error> rparen");
}
| LPAREN exp error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("lparen <Exp> <Error>");
}

;

newexp: NEW ID LPAREN arglist RPAREN {
  $$=new NewExpNode($2,$4);
  $$->setVal("new identifier lparen <ArgList> rparen");
}
| NEW error LPAREN arglist RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($4);
  $$->setVal("new <Error> lparen <ArgList> rparen");
}
| NEW ID error arglist RPAREN {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($2,$4);
  $$->setVal("new identifier <Error> <ArgList> rparen");
}
| NEW ID LPAREN error RPAREN {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($2);
  $$->setVal("new identifier lparen <Error> rparen");
}
| NEW simpletype bracketexps multibrackets {
  $$=new NewExpNode($2,$3,$4);
  $$->setVal("new <SimpleType> <BracketExps> <MultiBrackets>");
}
| NEW error bracketexps multibrackets {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($3,$4);
  $$->setVal("new <Error> <BracketExps> <MultiBrackets>");
}
| NEW simpletype error multibrackets {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($2,$4);
  $$->setVal("new <SimpleType> <Error> <MultiBrackets>");
}
| NEW ID bracketexps multibrackets {
  $$=new NewExpNode($2,$3,$4);
  $$->setVal("new identifier <BracketExps> <MultiBrackets>");
}
| NEW simpletype bracketexps {
  $$=new NewExpNode($2,$3);
  $$->setVal("new <SimpleType> <BracketExps>");
}
| NEW error bracketexps {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($3);
  $$->setVal("new <Error> <BracketExps>");
}
| NEW ID bracketexps {
  $$=new NewExpNode($2,$3);
  $$->setVal("new identifier <BracketExps>");
}

;

bracketexps: bracketexp {
  $$=new BracketExpsNode($1);
  $$->setVal("<BracketExp>");
}
| bracketexps bracketexp {
  $$=new BracketExpsNode($1,$2);
  $$->setVal("<BracketExps> <BracketExp>");
}

;

bracketexp: LBRACK exp RBRACK {
  $$=new BracketExpNode($2);
  $$->setVal("lbrack <Exp> rbrack");
}
| LBRACK error RBRACK {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new BracketExpNode();
  $$->setVal("lbrack <Error> rbrack");
}
| LBRACK exp error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new BracketExpNode($2);
  $$->setVal("lbrack <Exp> <Error>");
}

;

multibrackets: LBRACK RBRACK {
  $$=new MultibracketNode();
  $$->setVal("lbrack rbrack");
}
| multibrackets LBRACK RBRACK {
  $$=new MultibracketNode($1);
  $$->setVal("<Multibrackets> lbrack rbrack");
}
| multibrackets LBRACK error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MultibracketNode($1);
  $$->setVal("<Multibrackets> lbrack <Error>");
}

;

idbrack: ID {
  $$=new IdBrackNode($1);
  $$->setVal("identifier");
}
| ID multibrackets {
  $$=new IdBrackNode($1,$2);
  $$->setVal("identifier <MultiBrackets>");
}

;

%%
void yyerror(char const *s) 
{
  // Shut up Bison let me do the talking (please and thank you)
  err->withDesc(s);
} 
