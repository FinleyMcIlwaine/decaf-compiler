/*
 * program6.ypp
 * Finley McIlwaine
 * Dec. 17, 2019
 * COSC4785, Program 6
 *
 * Bison grammar input file
*/
%{
#include <iostream>
#include "Error.hpp"
#include "Node.hpp"
#include "MyScanner.hpp"
#include "Symbol.hpp"
#include "SymbolTable.hpp"
#include "Type.hpp"
#include "TypeTable.hpp"

using std::cout;
using std::endl;
using std::cerr;

extern Node* tree;
extern MyScanner scanner;
extern SymbolTable* root;
extern SymbolTable* cur;
extern TypeTable* types;


Error* err=new Error();
TypeError* terr=new TypeError();
string mainClass = "";

#define yylex() scanner.yylex()
#define YYERROR_VERBOSE 1

void yyerror(const char *);
%}

%locations
%debug
  /*
   * El Union
   */
%union {
  Node *pnode;
}

/*
 * token stuff
 */
%type<pnode> classdec
%type<pnode> classstart
%type<pnode> classbody
%type<pnode> methoddecs
%type<pnode> constructordecs
%type<pnode> vardecs
%type<pnode> vardec
%type<pnode> constructordec
%type<pnode> constructorstart
%type<pnode> methoddec
%type<pnode> methodstart
%type<pnode> parameterlist
%type<pnode> parameter
%type<pnode> block
%type<pnode> stmtblock
%type<pnode> stmtblockstart
%type<pnode> localvardecs
%type<pnode> stmts
%type<pnode> localvardec
%type<pnode> stmt
%type<pnode> conditionalstmt
%type<pnode> name
%type<pnode> program
%type<pnode> simpletype
%type<pnode> type
%type<pnode> arglist
%type<pnode> newexp
%type<pnode> exp
%type<pnode> multibrackets
%type<pnode> bracketexp
%type<pnode> bracketexps
%type<pnode> idbrack

%token<pnode> VOID
%token<pnode> CLASS
%token<pnode> RETURN
%token<pnode> WHILE
%token<pnode> PRINT
%token<pnode> SEMI
%token<pnode> ELSE
%token<pnode> IF
%token<pnode> ASSIGN
%token<pnode> READ
%token<pnode> NULLT
%token<pnode> DOT
%token<pnode> THIS
%token<pnode> INT
%token<pnode> NEW
%token<pnode> MAIN
%token<pnode> COMMA
%token<pnode> NUMBER
%token<pnode> ID
%token<pnode> RBRACK LPAREN RPAREN LBRACE
%left<pnode> EQ NE LE GE LT GT
%left<pnode> PLUS MINUS OR
%left<pnode> TIMES DIV MOD AND
%token<pnode> NOT

%precedence UNARYOP
%precedence IF
%precedence ELSE
%precedence<pnode> LBRACK RBRACE
/*
 * The Grammar :o
 */
%%
input: program {
  tree=new Node($1);
}

;

program: program classdec {
  $$=new ProgramNode($1,$2);
  $$->setVal("<Program> <ClassDec>");
}
| classdec {
  $$=new ProgramNode($1);
  $$->setVal("<ClassDec>");
}
| error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ProgramNode();
  $$->setVal("<Error>");
}

; /* do not ever even think about forgetting this stupid thing */ 

classdec: classstart classbody {
  $$=new ClassDecNode($1,$2);
  $$->setVal("<ClassStart> <ClassBody>");
  if (cur->getDeleteOnResolve())
  {
    delete cur;
  }
  cur=root;
}
| classstart error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassDecNode($1);
  $$->setVal("<ClassStart> <Error>");
}

;

classstart: CLASS ID {
  $$=new ClassStartNode($2);
  $$->setVal("class identifier");

  // Create a symbol table for the class
  ClassTable* newSymTab=new ClassTable();
  newSymTab->setClassName($2->getString());
  // Create the type for the class
  Type* newType=new Type();
  newType->withSymbolTable(newSymTab)->
    withBaseTypeString($2->getString());

  // Get the type ptr
  int loc=types->addType(newType);

  // Create a symbol for the class
  Symbol* sym=new ClassSymbol();
  sym->withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Track the class symbol of the table
  newSymTab->setClassSymbol(sym);

  // Put it in the root table
  int res=root->insert(sym);
  if (res==-3)
  {
    // A class with this identifier has already been defined, error and mark
    // the symbol table for deletion and pretend the next block of code never happened.
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: class '" + $2->getString() + "' has already been defined.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  // Then make the current symbol table the class' new symbol table
  cur=root->addChild(newSymTab); 
} 
| CLASS error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassStartNode();
  $$->setVal("class <Error>");
}

;

classbody: LBRACE vardecs constructordecs methoddecs RBRACE {
  $$=new ClassBodyNode($2,$3,$4);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> <MethodDecs> rbrace");
}
| error vardecs constructordecs methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3,$4);
  $$->setVal("<Error> <VarDecs> <ConstructorDecs> <MethodDecs> rbrace");
}
| error error constructordecs methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3,$4);
  $$->setVal("<Error> <Error> <ConstructorDecs> <MethodDecs> rbrace");
}
| error vardecs error methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$4);
  $$->setVal("<Error> <VarDecs> <Error> <MethodDecs> rbrace");
}
| error vardecs constructordecs error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("<Error> <VarDecs> <ConstructorDecs> <Error> rbrace");
}
| error vardecs constructordecs methoddecs error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3,$4);
  $$->setVal("<Error> <VarDecs> <ConstructorDecs> <MethodDecs> <Error>");
}
| LBRACE error error methoddecs RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($4);
  $$->setVal("lbrace <Error> <Error> <MethodDecs> rbrace");
}
| LBRACE error constructordecs error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("lbrace <Error> <ConstructorDecs> <Error> rbrace");
}
| LBRACE error constructordecs methoddecs error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3,$4);
  $$->setVal("lbrace <Error> <ConstructorDecs> <MethodDecs> <Error>");
}
| LBRACE vardecs error error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <VarDecs> <Error> <Error> rbrace");
}
| LBRACE vardecs error methoddecs error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$4);
  $$->setVal("lbrace <VarDecs> <Error> <MethodDecs> <Error>");
}
| LBRACE vardecs constructordecs error error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> <Error> <Error>");
}
| error error error methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($4);
  $$->setVal("<Error> <Error> <Error> <MethodDecs> rbrace");
}
| error error constructordecs error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("<Error> <Error> <ConstructorDecs> <Error> rbrace");
}
| error vardecs error error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("<Error> <VarDecs> <Error> <Error> rbrace");
}
| LBRACE error error error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("lbrace <Error> <Error> <Error> rbrace");
}
| error vardecs error methoddecs error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$4);
  $$->setVal("<Error> <VarDecs> <Error> <MethodDecs> <Error>");
}
| LBRACE error error methoddecs error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($4);
  $$->setVal("lbrace <Error> <Error> <MethodDecs> <Error>");
}
| LBRACE error constructordecs error error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("lbrace <Error> <ConstructorDecs> <Error> <Error>");
}
| LBRACE vardecs error error error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <VarDecs> <Error> <Error> <Error>");
}
| error error error error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("<Error> <Error> <Error> <Error> rbrace");
}
| error error error methoddecs error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($4);
  $$->setVal("<Error> <Error> <Error> <MethodDecs> <Error>");
}
| error error constructordecs error error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("<Error> <Error> <ConstructorDecs> <Error> <Error>");
}
| error vardecs error error error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("<Error> <VarDecs> <Error> <Error> <Error>");
}
| LBRACE error error error error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("lbrace <Error> <Error> <Error> <Error>");
}
| error error error error error {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("<Error> <Error> <Error> <Error> <Error>");
}
| LBRACE error constructordecs methoddecs RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3,$4);
  $$->setVal("lbrace <Error> <ConstructorDecs> <MethodDecs> rbrace");
}
| LBRACE vardecs error methoddecs RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$4);
  $$->setVal("lbrace <VarDecs> <Error> <MethodDecs> rbrace");
}
| LBRACE vardecs constructordecs error RBRACE {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> <Error> rbrace");
}
| LBRACE vardecs constructordecs methoddecs error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3,$4);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> <MethodDecs> <Error>");
}
| LBRACE vardecs constructordecs RBRACE {
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <VarDecs> <ConstructorDecs> rbrace");
}
| LBRACE vardecs methoddecs RBRACE {
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <VarDecs> <MethodDecs> rbrace");
}
| LBRACE vardecs error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <VarDecs> <Error> rbrace");
}
| LBRACE vardecs RBRACE {
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <VarDecs> rbrace");
}
| LBRACE constructordecs methoddecs RBRACE {
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <ConstructorDecs> <MethodDecs> rbrace");
}
| error constructordecs methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("<Error> <ConstructorDecs> <MethodDecs> rbrace");
}
| LBRACE error methoddecs RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($3);
  $$->setVal("lbrace <Error> <MethodDecs> rbrace");
}
| LBRACE constructordecs error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <ConstructorDecs> <Error> rbrace");
}
| LBRACE constructordecs methoddecs error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2,$3);
  $$->setVal("lbrace <ConstructorDecs> <MethodDecs> <Error>");
}
| LBRACE constructordecs RBRACE {
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <ConstructorDecs> rbrace");
}
| LBRACE methoddecs RBRACE {
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <MethodDecs> rbrace");
}
| LBRACE error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("lbrace <Error> rbrace");
}
| LBRACE methoddecs error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <MethodDecs> <Error>");
}
| error methoddecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("<Error> <MethodDecs> rbrace");
}
| LBRACE constructordecs error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("lbrace <ConstructorDecs> <Error>");
}
| error constructordecs RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode($2);
  $$->setVal("<Error> <ConstructorDecs> rbrace");
}
| LBRACE RBRACE {
  $$=new ClassBodyNode();
  $$->setVal("lbrace rbrace");
}
| error RBRACE {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("<Error> rbrace");
}
| LBRACE error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ClassBodyNode();
  $$->setVal("lbrace <Error>");
}

;

vardecs: vardecs vardec {
  $$=new VarDecsNode($1,$2);
  $$->setVal("<VarDecs> <VarDec>");
}
| vardec {
  $$=new VarDecsNode($1);
  $$->setVal("<VarDec>");
}
;

vardec: type ID SEMI {
  $$=new VarDecNode($1,$2);
  $$->setVal("<Type> identifier semi");

  // Figure out the type
  string t = ((TypeNode*)$1)->getTypeString();  // Type string
  int d    = ((TypeNode*)$1)->getDimension();   // Dimension
  int loc  = types->addType(t,d);  // Add to type table

  // Create a symbol for the id
  Symbol* sym=new Symbol();
  sym->
    withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Initialize it with zero if zero dimension int, else null
  if (d==0 && t=="int") sym->setValue(0);
  else sym->setValue("null");

  // Put it in the current table
  int res=cur->insert(sym);
  if (res==-3)
  {
    // Class mask
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" +
          $2->getString() + "' is a type, expected unqualified-id.");
    scanner.addTypeError(*terr);
  }
  else if (res==-4)
  {
    // Var Redef
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' already exists locally.");
    scanner.addTypeError(*terr);
  }
  else if(!cur->getDeleteOnResolve() && t != "int")
  {
    $$->setMySymbolTable(cur);
    ((VarDecNode*)$$)->setVarSymbol(sym);
    scanner.addTypeCheck($$);
  }
}
| type error SEMI {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new VarDecNode($1);
  $$->setVal("<Type> <Error> semi");
}
| type ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new VarDecNode($1,$2);
  $$->setVal("<Type> identifier <Error>");
}
| idbrack ID SEMI {
  $$=new VarDecNode($1,$2);
  $$->setVal("<IdBrack> identifier semi");

  // Figure out the type
  string t = ((IdBrackNode*)$1)->getId();          // Type string
  int d    = ((IdBrackNode*)$1)->getDimension();   // Dimension
  int loc  = types->addType(t,d);              // Add to type table

  // Create a symbol for the id
  Symbol* sym=new Symbol();
  sym->
    withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Initialize it with null
  sym->setValue("null");

  // Put it in the current table
  int res=cur->insert(sym);
  if (res==-3)
  {
    // Error here about masking class type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + 
          $2->getString() + "' is a type, expected unqualified-id.");
    scanner.addTypeError(*terr);
  }
  else if (res==-4)
  {
    // Error here about var redefinition
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' already exists locally.");
    scanner.addTypeError(*terr);
  }
  else if(!cur->getDeleteOnResolve())
  {
    $$->setMySymbolTable(cur);
    ((VarDecNode*)$$)->setVarSymbol(sym);
    scanner.addTypeCheck($$);
  }
}
| idbrack error SEMI {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new VarDecNode($1);
  $$->setVal("<IdBrack> <Error> semi");
}
| idbrack ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new VarDecNode($1,$2);
  $$->setVal("<IdBrack> identifier <Error>");
}

;

type: simpletype {
  $$=new TypeNode($1);
  $$->setVal("<SimpleType>");
  ((TypeNode*)$$)->withTypeString("int");
}
| type LBRACK RBRACK {
  $$=new TypeNode($1);
  $$->setVal("<Type> lbrack rbrack");
  ((TypeNode*)$$)->withTypeString(((TypeNode*)$1)->getTypeString());
}
| type error RBRACK {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new TypeNode($1);
  $$->setVal("<Type> <Error> rbrack");
}
| type LBRACK error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new TypeNode($1);
  $$->setVal("<Type> lbrack <Error>");
}

;

simpletype: INT {
  $$=new SimpleTypeNode();
  $$->setVal("int");
}

;

constructordecs: constructordecs constructordec {
  $$=new ConstructorDecsNode($1,$2);
  $$->setVal("<ConstructorDecs> <ConstructorDec>");
}
| constructordec {
  $$=new ConstructorDecsNode($1);
  $$->setVal("<ConstructorDec>");
}
;

constructordec: constructorstart block {
  $$=new ConstructorDecNode($1,$2);
  $$->setVal("<ConstructorStart> <Block>");

  cur = cur->getParent();
}
| constructorstart error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ConstructorDecNode($1);
  $$->setVal("<ConstructorStart> <Error>");
}

;

constructorstart: ID LPAREN RPAREN {
  $$=new CtorStartNode($1);
  $$->setVal("identifier lparen rparen");

  // Make a symbol table for this method
  MethodTable* newSymTab = new MethodTable();
  newSymTab->setMethodName($2->getString());

  // Create the type for this thing, it has no args!
  CtorType* t=new CtorType();
  t->withBaseTypeString("null")->
    withDimension(0)->
    withSymbolTable(newSymTab);
 
  ((ClassSymbol*)cur->getEncapsulatingClassSymbol())->addCtorType(t);

  int typePtr=types->addType(t);

  // Create a symbol for the ctor
  CtorSymbol* sym=new CtorSymbol();
  sym->
    withName($1->getString())->
    withLineNumber(@1.first_line)->
    withColNumber(@1.first_column)->
    withTypePtr(typePtr);

  // Put it in the current table
  if ($2->getString()!=cur->getEncapsulatingClassName())
  {
    // Does not match class name
    terr->
      withColNumber(@1.first_column)->
      withLineNumber(@1.first_line)->
      withDesc("error: method '" + 
          $1->getString() + "' cannot have 'null' return type.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else 
  {
    int res=cur->insert(sym);
    if (res==-2)
    {
      // Constructor with same type has already been defined
      terr->
        withColNumber(@1.first_column)->
        withLineNumber(@1.first_line)->
        withDesc("error: constructor with same type for class '" + 
            $1->getString() + "' has already been defined.");
      scanner.addTypeError(*terr);
      newSymTab->setDeleteOnResolve(true);
    }
  }
  // Then make the current symbol table the method's new symbol table
  cur=cur->addChild(newSymTab);
}
| ID LPAREN parameterlist RPAREN {
  $$=new CtorStartNode($1,$3);
  $$->setVal("identifier lparen <ParameterList> rparen"); 

  // Make a symbol table for it
  MethodTable* newSymTab = new MethodTable();
  newSymTab->setMethodName($2->getString());

  // Get the parameter symbols
  vector<Symbol*> symList;
  ((ParameterListNode*)$3)->buildArgSymbolList(&symList);

  // Get parameter strings, adding each symbol to it's new table
  vector<string> argStrings;
  for (auto& s : symList)
  {
    newSymTab->insert(s);
    argStrings.push_back(s->getFullTypeString());
  }

  // Make a type for the thing
  CtorType* t=new CtorType();
  ((CtorType*)(t->withBaseTypeString("null")))->
    withArgTypeList(argStrings)->
    withSymbolTable(newSymTab);

  ((ClassSymbol*)cur->getEncapsulatingClassSymbol())->addCtorType(t);

  int loc=types->addType(t);

  // Create a symbol for the ctor
  CtorSymbol* sym=new CtorSymbol();
  sym->withName($1->getString())->
    withLineNumber(@1.first_line)->
    withColNumber(@1.first_column)->
    withTypePtr(loc);

  // Put it in the current table if its valid
  if ($2->getString()!=cur->getEncapsulatingClassName())
  {
    // Does not match class name
    terr->
      withColNumber(@1.first_column)->
      withLineNumber(@1.first_line)->
      withDesc("error: method '" + $1->getString() + 
          "' cannot have 'null' return type.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else 
  {
    int res=cur->insert(sym);
    if (res==-2)
    {
      // Constructor with same type has already been defined
      terr->
        withColNumber(@1.first_column)->
        withLineNumber(@1.first_line)->
        withDesc("error: constructor with same type for class '" +
            $1->getString() + "' has already been defined.");
      scanner.addTypeError(*terr);
      newSymTab->setDeleteOnResolve(true);
    }
    else
    {
      ((CtorStartNode*)$$)->setMethodSymbol(sym);
      ((CtorStartNode*)$$)->setMethodTable(newSymTab);
      ((CtorStartNode*)$$)->setParameterListNode($3);
      scanner.addTypeCheck($$);
    }
  }
  // Then make the current symbol table the method's new symbol table
  cur=cur->addChild(newSymTab);
}
| ID LPAREN error RPAREN {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new CtorStartNode($1);
  $$->setVal("identifier lparen <Error> rparen"); 
}
| ID LPAREN error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new CtorStartNode($1);
  $$->setVal("identifier lparen <Error>"); 
}
| ID LPAREN parameterlist error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new CtorStartNode($1,$3);
  $$->setVal("identifier lparen <ParameterList> <Error>"); 
}

;

methoddecs: methoddecs methoddec {
  $$=new MethodDecsNode($1,$2);
  $$->setVal("<MethodDecs> <MethodDec>");
}
| methoddecs error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new MethodDecsNode($1);
  $$->setVal("<MethodDecs> <Error>");
}
| methoddec {
  $$=new MethodDecsNode($1);
  $$->setVal("<MethodDec>");
}

;

methoddec: methodstart block {
  $$=new MethodDecNode($1,$2);
  $$->setVal("<MethodStart> <Block>");

  cur = cur->getParent();
}
| error block {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new MethodDecNode($2);
  $$->setVal("<Error> <Block>");
}

;

methodstart: type ID LPAREN parameterlist RPAREN {
  $$=new MethodStartNode($1,$2,$4);
  $$->setVal("<Type> identifier lparen <ParameterList> rparen");
  ((MethodStartNode*)$$)->setParameterListNode($4);

  // Make a symbol table for it
  MethodTable* newSymTab = new MethodTable();
  newSymTab->setMethodName($2->getString());

  // Get the parameter symbols
  vector<Symbol*> symList;
  ((ParameterListNode*)$4)->buildArgSymbolList(&symList);

  // Get parameter strings, adding each symbol to it's new table
  vector<string> argStrings;
  for (auto& s : symList)
  {
    newSymTab->insert(s);
    argStrings.push_back(s->getFullTypeString());
  }

  // Figure out the type
  string ts = ((TypeNode*)$1)->getTypeString();  // Type string
  int d    = ((TypeNode*)$1)->getDimension();   // Dimension

  // Make a type for the thing
  MethodType* t=new MethodType();
  ((MethodType*)(t->withBaseTypeString(ts))->
    withDimension(d))->
    withArgTypeList(argStrings)->
    withSymbolTable(newSymTab);

  int loc=types->addType(t);

  // Create a symbol for the method
  MethodSymbol* sym=new MethodSymbol();
  sym->withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Put it in the current table
  int res=cur->insert(sym);
  if (res==-1)
  {
    // error about only differing from other method by return type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: method '" + $2->getString() + "' must differ by more than just return type.");
     scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if (res==-2)
  {
    // error about same signature as other method
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: method '" + $2->getString() + "' with identical signature already exists locally.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if (res==-3)
  {
    // error about sharing ID with class type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' is a type, expected unqualified-id.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if(!cur->getDeleteOnResolve())
  {
    $$->setMySymbolTable(cur);
    ((MethodStartNode*)$$)->setMethodSymbol(sym);
    ((MethodStartNode*)$$)->setMethodTable(newSymTab);
    scanner.addTypeCheck($$);
  }

  // Then make the current symbol table the method's new symbol table
  cur=cur->addChild(newSymTab);
}
| type error LPAREN parameterlist RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$4);
  $$->setVal("<Type> <Error> lparen <ParameterList> rparen");
}
| type error LPAREN error RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1);
  $$->setVal("<Type> <Error> lparen <ParameterList> rparen");
}
| type ID LPAREN parameterlist error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$2,$3);
  $$->setVal("<Type> identifier lparen <ParameterList> error");
}
| type ID LPAREN error RPAREN {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$2);
  $$->setVal("<Type> identifier lparen <Error> rparen");
}
| type ID LPAREN error error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$2);
  $$->setVal("<Type> identifier lparen <Error> <Error>");
}
| type ID LPAREN RPAREN {
  $$=new MethodStartNode($1,$2);
  $$->setVal("<Type> identifier lparen rparen");

  // Make a symbol table for it
  MethodTable* newSymTab = new MethodTable();
  newSymTab->setMethodName($2->getString());

  // Figure out the type
  string ts = ((TypeNode*)$1)->getTypeString();  // Type string
  int d    = ((TypeNode*)$1)->getDimension();   // Dimension

  // Make a type for the thing
  MethodType* t=new MethodType();
  ((MethodType*)(t->withBaseTypeString(ts))->withDimension(d))->
    withSymbolTable(newSymTab);

  int loc=types->addType(t);

  // Create a symbol for the method
  MethodSymbol* sym=new MethodSymbol();
  sym->withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Put it in the current table
  int res=cur->insert(sym);
  if (res==-1)
  {
    // error about only differing from other method by return type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: method '" + $2->getString() + "' must differ by more than just return type.");
     scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if (res==-2)
  {
    // error about same signature as other method
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: method '" + $2->getString() + "' with identical signature already exists locally.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if (res==-3)
  {
    // error about sharing ID with class type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' is a type, expected unqualified-id.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if(!cur->getDeleteOnResolve())
  {
    $$->setMySymbolTable(cur);
    ((MethodStartNode*)$$)->setMethodSymbol(sym);
    ((MethodStartNode*)$$)->setMethodTable(newSymTab);
    scanner.addTypeCheck($$);
  }

  // Then make the current symbol table the method's new symbol table
  cur=cur->addChild(newSymTab);
}
| type ID LPAREN error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$2);
  $$->setVal("<Type> identifier lparen <Error>");
}
| type ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$2);
  $$->setVal("<Type> identifier <Error>");
}
| VOID ID LPAREN parameterlist RPAREN {
  $$=new MethodStartNode($2,$4);
  $$->setVal("void identifier lparen <ParameterList> rparen");
  ((MethodStartNode*)$$)->setParameterListNode($4);

  // Make a symbol table for it
  MethodTable* newSymTab = new MethodTable();
  newSymTab->setMethodName($2->getString());

  // Get the parameter symbols
  vector<Symbol*> symList;
  ((ParameterListNode*)$4)->buildArgSymbolList(&symList);

  // Get parameter strings, adding each symbol to it's new table
  vector<string> argStrings;
  for (auto& s : symList)
  {
    newSymTab->insert(s);
    argStrings.push_back(s->getFullTypeString());
  }

  MethodType* t=new MethodType();
  ((MethodType*)(t->withBaseTypeString("void")))->
    withArgTypeList(argStrings)->
    withSymbolTable(newSymTab);

  int loc=types->addType(t);

  // Create a symbol for the method
  MethodSymbol* sym=new MethodSymbol();
  sym->withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Put it in the current table
  int res=cur->insert(sym);
  if (res==-1)
  {
    // error about only differing from other method by return type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: method '" + $2->getString() + "' must differ by more than just return type.");
     scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if (res==-2)
  {
    // error about same signature as other method
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: method '" + $2->getString() + "' with identical signature already exists locally.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if (res==-3)
  {
    // error about sharing ID with class type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' is a type, expected unqualified-id.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if(!cur->getDeleteOnResolve())
  {
    $$->setMySymbolTable(cur);
    ((MethodStartNode*)$$)->setMethodSymbol(sym);
    ((MethodStartNode*)$$)->setMethodTable(newSymTab);
    scanner.addTypeCheck($$);
  }

  // Then make the current symbol table the method's new symbol table
  cur=cur->addChild(newSymTab);
}
| VOID error LPAREN parameterlist RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($4);
  $$->setVal("void <Error> lparen <ParameterList> rparen");
}
| VOID ID error parameterlist RPAREN {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($2,$4);
  $$->setVal("void identifier <Error> <ParameterList> rparen");
}
| VOID ID LPAREN error RPAREN {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($2);
  $$->setVal("void identifier lparen <Error> rparen");
}
| VOID ID LPAREN parameterlist error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($2,$4);
  $$->setVal("void identifier lparen <ParameterList> <Error>");
}
| VOID error LPAREN error RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode();
  $$->setVal("void <Error> lparen <Error> rparen");
}
| VOID ID LPAREN RPAREN {
  $$=new MethodStartNode($2);
  $$->setVal("void identifier lparen rparen");

  // Make a symbol table for it
  MethodTable* newSymTab = new MethodTable();
  newSymTab->setMethodName($2->getString());

  // Make a type for the thing
  MethodType* t=new MethodType();
  t->withBaseTypeString("void")->
    withSymbolTable(newSymTab);

  int loc=types->addType(t);

  // Create a symbol for the method
  MethodSymbol* sym=new MethodSymbol();
  sym->withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Put it in the current table
  int res=cur->insert(sym);
  if (res==-1)
  {
    // error about only differing from other method by return type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: method '" + $2->getString() + "' must differ by more than just return type.");
     scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if (res==-2)
  {
    // error about same signature as other method
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: method '" + $2->getString() + "' with identical signature already exists locally.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if (res==-3)
  {
    // error about sharing ID with class type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' is a type, expected unqualified-id.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else if(!cur->getDeleteOnResolve())
  {
    $$->setMySymbolTable(cur);
    ((MethodStartNode*)$$)->setMethodSymbol(sym);
    ((MethodStartNode*)$$)->setMethodTable(newSymTab);
    scanner.addTypeCheck($$);
  }

  // Then make the current symbol table the method's new symbol table
  cur=cur->addChild(newSymTab);
}
| VOID ID LPAREN error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($2);
  $$->setVal("void identifier lparen <Error>");
}
| VOID ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($2);
  $$->setVal("void identifier <Error>");
}
| idbrack ID LPAREN parameterlist RPAREN {
  $$=new MethodStartNode($1,$2,$4);
  $$->setVal("<IdBrack> identifier lparen <ParameterList> rparen");
}
| idbrack error LPAREN parameterlist RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$4);
  $$->setVal("<IdBrack> <Error> lparen <ParameterList> rparen");
}
| idbrack ID LPAREN error RPAREN {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$2);
  $$->setVal("<IdBrack> identifier lparen <Error> rparen");
}
| idbrack ID LPAREN parameterlist error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new MethodStartNode($1,$2,$4);
  $$->setVal("<IdBrack> identifier lparen <ParameterList> <Error>");
}
| VOID MAIN LPAREN RPAREN {
  if (mainClass != "") {
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: 'main' method already implemented in class '"+mainClass+"'.");
    scanner.addTypeError(*terr);
  }
  else
  {
    mainClass=cur->getEncapsulatingClassName();
  }
  $$=new MethodStartNode();

  // Make a symbol table for it
  SymbolTable* newSymTab = new MethodTable();

  // Make a type for the thing
  MethodType* t=new MethodType();
  t->withBaseTypeString("void")->
    withSymbolTable(newSymTab);

  int loc=types->addType(t);

  // Create a symbol for the method
  MethodSymbol* sym=new MethodSymbol();
  sym->withName("main")->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  if (mainClass != "") {
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: 'main' method already implemented in class '"+mainClass+"'.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else
  {
    mainClass=cur->getEncapsulatingClassName();
    // Put it in the current table
    int res=cur->insert(sym);
    if (res==-1)
    {
      // error about only differing from other method by return type
      terr->
        withColNumber(@2.first_column)->
        withLineNumber(@2.first_line)->
        withDesc("error: method '" + $2->getString() + "' must differ by more than just return type.");
       scanner.addTypeError(*terr);
      newSymTab->setDeleteOnResolve(true);
    }
    else if (res==-2)
    {
      // error about same signature as other method
      terr->
        withColNumber(@2.first_column)->
        withLineNumber(@2.first_line)->
        withDesc("error: method '" + $2->getString() + "' with identical signature already exists locally.");
      scanner.addTypeError(*terr);
      newSymTab->setDeleteOnResolve(true);
    }
    else if (res==-3)
    {
      // error about sharing ID with class type
      terr->
        withColNumber(@2.first_column)->
        withLineNumber(@2.first_line)->
        withDesc("error: identifier '" + $2->getString() + "' is a type, expected unqualified-id.");
      scanner.addTypeError(*terr);
      newSymTab->setDeleteOnResolve(true);
    }
  }

  // Then make the current symbol table the method's new symbol table
  cur=cur->addChild(newSymTab);
}
| INT MAIN LPAREN RPAREN {
  $$=new MethodStartNode();

  // Make a symbol table for it
  SymbolTable* newSymTab = new MethodTable();

  // Make a type for the thing
  MethodType* t=new MethodType();
  ((MethodType*)(t->withBaseTypeString("int"))->withDimension(0))->
    withSymbolTable(newSymTab);

  int loc=types->addType(t);

  // Create a symbol for the method
  MethodSymbol* sym=new MethodSymbol();
  sym->withName("main")->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  if (mainClass != "") {
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: 'main' method already implemented in class '"+mainClass+"'.");
    scanner.addTypeError(*terr);
    newSymTab->setDeleteOnResolve(true);
  }
  else
  {
    mainClass=cur->getEncapsulatingClassName();
    // Put it in the current table
    int res=cur->insert(sym);
    if (res==-1)
    {
      // error about only differing from other method by return type
      terr->
        withColNumber(@2.first_column)->
        withLineNumber(@2.first_line)->
        withDesc("error: method '" + $2->getString() + "' must differ by more than just return type.");
       scanner.addTypeError(*terr);
      newSymTab->setDeleteOnResolve(true);
    }
    else if (res==-2)
    {
      // error about same signature as other method
      terr->
        withColNumber(@2.first_column)->
        withLineNumber(@2.first_line)->
        withDesc("error: method '" + $2->getString() + "' with identical signature already exists locally.");
      scanner.addTypeError(*terr);
      newSymTab->setDeleteOnResolve(true);
    }
    else if (res==-3)
    {
      // error about sharing ID with class type
      terr->
        withColNumber(@2.first_column)->
        withLineNumber(@2.first_line)->
        withDesc("error: identifier '" + $2->getString() + "' is a type, expected unqualified-id.");
      scanner.addTypeError(*terr);
      newSymTab->setDeleteOnResolve(true);
    }
  }

  // Then make the current symbol table the method's new symbol table
  cur=cur->addChild(newSymTab);
}

;

parameterlist: parameter {
  $$=new ParameterListNode($1);
  $$->setVal("<Parameter>");
}
| parameterlist COMMA parameter {
  $$=new ParameterListNode($1,$3);
  $$->setVal("<ParameterList> comma <Exp>");
}
| error COMMA parameter {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ParameterListNode($3);
  $$->setVal("<Error> comma <Exp>");
}
| parameterlist COMMA error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ParameterListNode($1);
  $$->setVal("<ParameterList> comma <Error>");
}

;

parameter: type ID {
  $$=new ParameterNode($1,$2);
  $$->setVal("<Type> identifier");

  // Figure out the type
  string t = ((TypeNode*)$1)->getTypeString();  // Type string
  int d    = ((TypeNode*)$1)->getDimension();   // Dimension
  int loc  = types->addType(t,d);  // Add to type table

  // Create a symbol for the id
  Symbol* sym=new Symbol();
  sym->
    withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  if (d==0 && t=="int") sym->setValue(0);
  else sym->setValue("null");

  ((ParameterNode*)$$)->setSymbol(sym);
}
| idbrack ID {
  $$=new ParameterNode($1,$2);
  $$->setVal("<IdBrack> identifier");
  // Figure out the type
  string t = ((IdBrackNode*)$1)->getId();          // Type string
  int d    = ((IdBrackNode*)$1)->getDimension();   // Dimension
  int loc  = types->addType(t,d);              // Add to type table

  // Create a symbol for the id
  Symbol* sym=new Symbol();
  sym->
    withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  sym->setValue("null");

  ((ParameterNode*)$$)->setSymbol(sym);
}

;

stmtblock: stmtblockstart localvardecs stmts RBRACE {
  $$=new StmtBlockNode($1,$2,$3);
  $$->setVal("<StmtBlockStart> <LocalVarDecs> <Stmts> rbrace");
}
| stmtblockstart error stmts RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new StmtBlockNode($1,$3);
  $$->setVal("<StmtBlockStart> <Error> <Stmts> rbrace");
}
| stmtblockstart localvardecs error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtBlockNode($1,$2);
  $$->setVal("<StmtBlockStart> <LocalVarDecs> <Error> rbrace");
}
| stmtblockstart error error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtBlockNode($1);
  $$->setVal("<StmtBlockStart> <Error> <Error> rbrace");
}
| stmtblockstart localvardecs RBRACE {
  $$=new StmtBlockNode($1,$2);
  $$->setVal("<StmtBlockStart> <LocalVarDecs> rbrace");
}
| stmtblockstart stmts RBRACE {
  $$=new StmtBlockNode($1,$2);
  $$->setVal("<StmtBlockStart> <Stmts> rbrace");
}
| stmtblockstart error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new StmtBlockNode($1);
  $$->setVal("<StmtBlockStart> <Error> rbrace");
}
| stmtblockstart RBRACE {
  $$=new StmtBlockNode($1);
  $$->setVal("<StmtBlockStart> rbrace");
}

;

stmtblockstart: LBRACE {
  $$=new StmtBlockStartNode();
  $$->setVal("lbrace");

  // Make a sym tab
  SymbolTable* newSymTab=new BlockTable();

  // Make a type for the thing
  Type* t=new Type();
  t->withSymbolTable(newSymTab);

  int loc=types->addType(t);

  // Create a symbol for the block
  BlockSymbol* sym=new BlockSymbol();
  sym->withTypePtr(loc);

  // Put it in the current table don't need to check for insertion
  // because what the heck its a block c'mon
  cur->insert(sym);

  // Then make the current symbol table the block's new symbol table
  cur=cur->addChild(newSymTab);
}

;

block: LBRACE localvardecs stmts RBRACE {
  $$=new BlockNode($2,$3);
  $$->setVal("lbrace <LocalVarDecs> <Stmts> rbrace");
}
| LBRACE localvardecs error RBRACE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new BlockNode($2);
  $$->setVal("lbrace <LocalVarDecs> <Error> rbrace");
}
| LBRACE localvardecs RBRACE {
  $$=new BlockNode($2);
  $$->setVal("lbrace <LocalVarDecs> rbrace");
}
| LBRACE stmts RBRACE {
  $$=new BlockNode($2);
  $$->setVal("lbrace <Stmts> rbrace");
}
| LBRACE error RBRACE {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new BlockNode();
  $$->setVal("lbrace <Error> rbrace");
}
| LBRACE RBRACE {
  $$=new BlockNode();
  $$->setVal("lbrace rbrace");
}

;

localvardecs: localvardecs localvardec {
  $$=new LocalVarDecsNode($1,$2);
  $$->setVal("<LocalVarDecs> <LocalVarDec>");
}
| localvardecs error %prec IF {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1);
  $$->setVal("<LocalVarDecs> <Error>");
}
| localvardec {
  $$=new LocalVarDecsNode($1);
  $$->setVal("<LocalVarDec>");
}

;

localvardec: type ID SEMI {
  $$=new LocalVarDecNode($1,$2);
  $$->setVal("<Type> identifier semi");

  // Figure out the type
  string t = ((TypeNode*)$1)->getTypeString();  // Type string
  int d    = ((TypeNode*)$1)->getDimension();   // Dimension
  int loc  = types->addType(t,d);  // Add to type table

  // Create a symbol for the id
  Symbol* sym=new Symbol();
  sym->
    withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Initialize it
  if (d==0 && t=="int") sym->setValue(0);
  else sym->setValue("null");

  // Put it in the current table
  int res=cur->insert(sym);
  if (res==-3)
  {
    // Class mask
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' is a type, expected unqualified-id.");
    scanner.addTypeError(*terr);
  }
  else if (res==-4)
  {
    // Var Redef
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' already exists locally.");
    scanner.addTypeError(*terr);
  }
  else if(!cur->getDeleteOnResolve() && t != "int")
  {
    $$->setMySymbolTable(cur);
    ((LocalVarDecNode*)$$)->setVarSymbol(sym);
    scanner.addTypeCheck($$);
  }
}
| type error SEMI {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1);
  $$->setVal("<Type> <Error> semi");
}
| type ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1,$2);
  $$->setVal("<Type> identifier <Error>");
}
| idbrack ID SEMI {
  $$=new LocalVarDecNode($1,$2);
  $$->setVal("<IdBrack> identifier semi");

  // Figure out the type
  string t = ((IdBrackNode*)$1)->getId();          // Type string
  int d    = ((IdBrackNode*)$1)->getDimension();   // Dimension
  int loc  = types->addType(t,d);              // Add to type table

  // Create a symbol for the id
  Symbol* sym=new Symbol();
  sym->
    withName($2->getString())->
    withLineNumber(@2.first_line)->
    withColNumber(@2.first_column)->
    withTypePtr(loc);

  // Initialize it
  sym->setValue("null");

  // Put it in the current table
  int res=cur->insert(sym);
  if (res==-3)
  {
    // Error here about masking class type
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' is a type, expected unqualified-id.");
    scanner.addTypeError(*terr);
  }
  else if (res==-4)
  {
    // Error here about var redefinition
    terr->
      withColNumber(@2.first_column)->
      withLineNumber(@2.first_line)->
      withDesc("error: identifier '" + $2->getString() + "' already exists locally.");
    scanner.addTypeError(*terr);
  }
  else if(!cur->getDeleteOnResolve())
  {
    $$->setMySymbolTable(cur);
    ((LocalVarDecNode*)$$)->setVarSymbol(sym);
    scanner.addTypeCheck($$);
  }
}
| idbrack error SEMI {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1);
  $$->setVal("<IdBrack> <Error> semi");
}
| idbrack ID error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new LocalVarDecsNode($1,$2);
  $$->setVal("<IdBrack> identifier <Error>");
}

;

stmts: stmts stmt {
  $$=new StmtsNode($1,$2);
  $$->setVal("<Stmts> <Stmt>");
}
| stmts error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new StmtsNode($1);
  $$->setVal("<Stmts> <Error>");
}
| stmt {
  $$=new StmtsNode($1);
  $$->setVal("<Stmt>");
}

;

stmt: SEMI {
  $$=new StmtNode();
  $$->setVal("semi");
}
| name ASSIGN exp SEMI {
  $$=new StmtNode($1,$3);
  $$->setVal("<Name> assign <Exp> semi");
}
| error ASSIGN exp SEMI {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new StmtNode($3);
  $$->setVal("<Error> assign <Exp> semi");
}
| name ASSIGN error SEMI {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1);
  $$->setVal("<Name> assign <Error> semi");
}
| name ASSIGN exp error {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1,$3);
  $$->setVal("<Name> assign <Exp> <Error>");
}
| name LPAREN arglist RPAREN SEMI {
  $$=new StmtNode($1,$3);
  $$->setVal("<Name> lparen <ArgList> rparen semi");
}
| name LPAREN error RPAREN SEMI {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1);
  $$->setVal("<Name> lparen <Error> rparen semi");
}
| name LPAREN arglist RPAREN error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1,$3);
  $$->setVal("<Name> lparen <ArgList> rparen <Error>");
}
| PRINT LPAREN arglist RPAREN SEMI {
  $$=new StmtNode($3);
  $$->setVal("print lparen <ArgList> rparen semi");
}
| PRINT LPAREN error RPAREN SEMI {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1);
  $$->setVal("print lparen <Error> rparen semi");
}
| PRINT LPAREN arglist RPAREN error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new StmtNode($1,$3);
  $$->setVal("print lparen <ArgList> rparen <Error>");
}
| conditionalstmt {
  $$=new StmtNode($1);
  $$->setVal("<ConditionalStmt>");
}
| WHILE LPAREN exp RPAREN stmt {
  $$=new StmtNode($3,$5);
  $$->setVal("while lparen <Exp> rparen <Stmt>");
}
| WHILE error exp RPAREN stmt {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new StmtNode($3,$5);
  $$->setVal("while <Error> <Exp> rparen <Stmt>");
}
| WHILE LPAREN error RPAREN stmt {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new StmtNode($5);
  $$->setVal("while lparen <Error> rparen <Stmt>");
}
| WHILE LPAREN exp error stmt {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new StmtNode($3,$5);
  $$->setVal("while lparen <Exp> <Error> <Stmt>");
}
| WHILE LPAREN exp RPAREN error {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new StmtNode($3);
  $$->setVal("while lparen <Exp> rparen <Error>");
}
| RETURN exp SEMI {
  $$=new StmtNode($2);
  $$->setVal("return <Exp> semi");
}
| RETURN SEMI {
  $$=new StmtNode();
  $$->setVal("return semi");
}
| RETURN error {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new StmtNode();
  $$->setVal("return <Error>");
}
| stmtblock {
  $$=new StmtNode($1);
  $$->setVal("<StmtBlock>");

  // Reset sym tab
  cur = cur->getParent();
}

;

name: THIS {
  $$=new NameNode();
  $$->setVal("this");
  Symbol* thisSym = cur->getEncapsulatingClassSymbol();
  if (thisSym)
  {
    $$->setType(thisSym->getType());
  }
}
| ID %prec IF {
  $$=new NameNode($1);
  $$->setVal($1->getString());
  if (!cur->getDeleteOnResolve())
  {
    ((NameNode*)$$)->checkType="identifier";
    ((NameNode*)$$)->identifier=$1->getString();
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}
| name DOT ID {
  $$=new NameNode($1,$3);
  $$->setVal($1->getString()+"."+$3->getString());
  if (!cur->getDeleteOnResolve())
  {
    ((NameNode*)$$)->checkType="ref_dot";
    ((NameNode*)$$)->identifier=$1->getString();
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}
| name DOT error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new NameNode($1);
  $$->setVal("<Name> dot <Error>");
  yyerrok;
}
| name bracketexp {
  $$=new NameNode($1,$2);
  $$->setVal($1->getString());
  if (!cur->getDeleteOnResolve())
  {
    ((NameNode*)$$)->checkType="bexp";
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}

;

arglist: exp {
  $$=new ArgListNode($1);
  $$->setVal("<Exp>");
}
| arglist COMMA exp {
  $$=new ArgListNode($1,$3);
  $$->setVal("<ArgList> comma <Exp>");
}
| %empty {
  $$=new ArgListNode();
  $$->setVal("empty"); /* HOW TO SHOW THIS??? */
}

;

conditionalstmt: IF LPAREN exp RPAREN stmt %prec IF {
  $$=new ConditionalStmtNode($3,$5);
  $$->setVal("if lparen <Exp> rparen <Stmt>");
}
| IF LPAREN error RPAREN stmt %prec IF {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($5);
  $$->setVal("if lparen <Error> rparen <Stmt>");
}
| IF LPAREN exp RPAREN error %prec IF {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($3);
  $$->setVal("if lparen <Exp> rparen <Error>");
}
| IF LPAREN error RPAREN error %prec IF {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode();
  $$->setVal("if lparen <Error> rparen <Error>");
}
| IF LPAREN exp RPAREN stmt ELSE stmt %prec ELSE {
  $$=new ConditionalStmtNode($3,$5,$7);
  $$->setVal("if lparen <Exp> rparen <Stmt> else <Stmt>");
}
| IF LPAREN error RPAREN stmt ELSE stmt %prec ELSE {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($5,$7);
  $$->setVal("if lparen <Error> rparen <Stmt> else <Stmt>");
}
| IF LPAREN exp RPAREN error ELSE stmt %prec ELSE {
  err->withColNumber(@5.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($3,$7);
  $$->setVal("if lparen <Exp> rparen <Error> else <Stmt>");
}
| IF LPAREN exp RPAREN stmt ELSE error %prec ELSE {
  err->withColNumber(@7.first_column)->withLineNumber(@5.first_line);
  scanner.addError(*err);
  $$=new ConditionalStmtNode($3,$5);
  $$->setVal("if lparen <Exp> rparen <Stmt> else <Error>");
}

;

exp: name {
  $$=new ExpNode($1);
  $$->setVal("<Name>");
  if (!cur->getDeleteOnResolve())
  {
    $$->checkType="name";
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}
| NUMBER {
  $$=new ExpNode($1);
  $$->setVal("number");
  Type* t=new Type();
  t->withBaseTypeString("int")->
    withDimension(0);
  $$->setType(t);
}
| NULLT {
  $$=new ExpNode();
  $$->setVal("null");
  Type* t=new Type();
  t->withBaseTypeString("null")->
    withDimension(0);
  $$->setType(t);
  // This thing does not have a type
}
| name LPAREN arglist RPAREN {
  $$=new ExpNode($1,$3);
  $$->setVal("<Name> lparen <ArgList> rparen");
  // Gotta make sure the call is valid, cannot be a constructor
  if (!cur->getDeleteOnResolve())
  {
    $$->checkType="name_arglist";
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}
| name LPAREN error RPAREN {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ExpNode($1);
  $$->setVal("<Name> lparen <Error> rparen");
}
| READ LPAREN RPAREN {
  $$=new ExpNode();
  $$->setVal("read lparen rparen");
  // Just integer type
  Type* t=new Type();
  t->withBaseTypeString("int")->
    withDimension(0);
  $$->setType(t);
}
| READ error RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("read <Error> rparen");
}
| READ LPAREN error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("read lparen <Error>");
}
| newexp {
  $$=new ExpNode($1);
  $$->setVal("<NewExp>");
  // TODO Just the type of the newexp itself
}
| PLUS exp %prec UNARYOP {
  $$=new ExpNode($2);
  $$->setVal("plus <Exp>");
  // TODO Expression needs integer type
}
| PLUS error %prec UNARYOP {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("plus <Error>");
}
| MINUS exp %prec UNARYOP {
  $$=new ExpNode($2);
  $$->setVal("minus <Exp>");
}
| MINUS error %prec UNARYOP {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("minus <Error>");
}
| NOT exp %prec UNARYOP {
  $$=new ExpNode($2);
  $$->setVal("not <Exp>");
}
| NOT error %prec UNARYOP {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("not <Error>");
}
| exp EQ exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> eq <Exp>");
}
| error EQ exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> eq <Exp>");
}
| exp NE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> ne <Exp>");
}
| error NE exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> ne <Exp>");
}
| exp LE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> le <Exp>");
}
| error LE exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> le <Exp>");
}
| exp GE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> ge <Exp>");
}
| error GE exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> ge <Exp>");
}
| exp LT exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> lt <Exp>");
}
| error LT exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> lt <Exp>");
}
| exp GT exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> gt <Exp>");
}
| error GT exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> gt <Exp>");
}
| exp PLUS exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> plus <Exp>");
}
| error PLUS exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> plus <Exp>");
}
| exp MINUS exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> minus <Exp>");
}
| error MINUS exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> minus <Exp>");
}
| exp OR exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> or <Exp>");
}
| error OR exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> or <Exp>");
}
| exp TIMES exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> times <Exp>");
}
| error TIMES exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> times <Exp>");
}
| exp DIV exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> div <Exp>");
}
| error DIV exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> div <Exp>");
}
| exp MOD exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> mod <Exp>");
}
| error MOD exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> mod <Exp>");
}
| exp AND exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<Exp> and <Exp>");
}
| error AND exp {
  err->withColNumber(@1.first_column)->withLineNumber(@1.first_line);
  scanner.addError(*err);
  $$=new ExpNode($3);
  $$->setVal("<Error> and <Exp>");
}
| LPAREN exp RPAREN {
  $$=new ExpNode($2);
  $$->setVal("lparen <Exp> rparen");
}
| LPAREN error RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("lparen <Error> rparen");
}
| LPAREN exp error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new ExpNode();
  $$->setVal("lparen <Exp> <Error>");
}

;

newexp: NEW ID LPAREN arglist RPAREN {
  $$=new NewExpNode($2,$4);
  $$->setVal("new identifier lparen <ArgList> rparen");
  // TODO Gotta make sure the call is valid
  if (!cur->getDeleteOnResolve())
  {
    $$->checkType="id_arglist";
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}
| NEW error LPAREN arglist RPAREN {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($4);
  $$->setVal("new <Error> lparen <ArgList> rparen");
}
| NEW ID error arglist RPAREN {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($2,$4);
  $$->setVal("new identifier <Error> <ArgList> rparen");
}
| NEW ID LPAREN error RPAREN {
  err->withColNumber(@4.first_column)->withLineNumber(@4.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($2);
  $$->setVal("new identifier lparen <Error> rparen");
}
| NEW simpletype bracketexps LBRACK RBRACK {
  $$=new NewExpNode($2,$3);
  $$->setVal("new <SimpleType> <BracketExps> <MultiBrackets>");
  // TODO
  if (!cur->getDeleteOnResolve())
  {
    $$->checkType="st_bexp_bracks";
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}
| NEW error bracketexps LBRACK RBRACK {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($3);
  $$->setVal("new <Error> <BracketExps> <MultiBrackets>");
}
| NEW simpletype error LBRACK RBRACK {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($2);
  $$->setVal("new <SimpleType> <Error> <MultiBrackets>");
}
| NEW ID bracketexps LBRACK RBRACK {
  $$=new NewExpNode($2,$3,$4);
  $$->setVal("new identifier <BracketExps> <MultiBrackets>");
  // TODO
  if (!cur->getDeleteOnResolve())
  {
    $$->checkType="id_bexp_bracks";
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}
| NEW simpletype bracketexps {
  $$=new NewExpNode($2,$3);
  $$->setVal("new <SimpleType> <BracketExps>");
  // TODO
  if (!cur->getDeleteOnResolve())
  {
    $$->checkType="st_bexp";
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}
| NEW error bracketexps {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new NewExpNode($3);
  $$->setVal("new <Error> <BracketExps>");
}
| NEW ID bracketexps {
  $$=new NewExpNode($2,$3);
  $$->setVal("new identifier <BracketExps>");
  // TODO
  if (!cur->getDeleteOnResolve())
  {
    $$->checkType="id_bexp";
    $$->setMySymbolTable(cur);
    $$->line=@1.first_line;
    $$->col=@1.first_column;
    scanner.addTypeCheck($$);
  }
}

;

bracketexps: bracketexp {
  $$=new BracketExpsNode($1);
  $$->setVal("<BracketExp>");
}
| bracketexps bracketexp {
  $$=new BracketExpsNode($1,$2);
  $$->setVal("<BracketExps> <BracketExp>");
}

;

bracketexp: LBRACK exp RBRACK {
  $$=new BracketExpNode($2);
  $$->setVal("lbrack <Exp> rbrack");
}
| LBRACK error RBRACK {
  err->withColNumber(@2.first_column)->withLineNumber(@2.first_line);
  scanner.addError(*err);
  $$=new BracketExpNode();
  $$->setVal("lbrack <Error> rbrack");
}
| LBRACK exp error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new BracketExpNode($2);
  $$->setVal("lbrack <Exp> <Error>");
}

;

multibrackets: LBRACK RBRACK {
  $$=new MultibracketNode();
  $$->setVal("lbrack rbrack");
  ((MultibracketNode*)$$)->setDimension(1);
}
| multibrackets LBRACK RBRACK {
  $$=new MultibracketNode($1);
  $$->setVal("<Multibrackets> lbrack rbrack");
  ((MultibracketNode*)$$)->
    setDimension(((MultibracketNode*)$1)->getDimension()+1);
}
| multibrackets LBRACK error {
  err->withColNumber(@3.first_column)->withLineNumber(@3.first_line);
  scanner.addError(*err);
  $$=new MultibracketNode($1);
  $$->setVal("<Multibrackets> lbrack <Error>");
}

;

idbrack: ID {
  $$=new IdBrackNode($1);
  $$->setVal("identifier");
}
| ID multibrackets {
  $$=new IdBrackNode($1,$2);
  $$->setVal("identifier <MultiBrackets>");
}

;

%%
void yyerror(char const *s) 
{
  // Shut up Bison let me do the talking (please and thank you)
  err->withDesc(s);
} 
