Grammar

    0 $accept: program $end

    1 program: multibrackets
    2        | exp
    3        | type

    4 exp: name
    5    | NUMBER

    6 type: simpletype

    7 simpletype: INT

    8 bracketexps: bracketexp
    9            | bracketexps bracketexp

   10 bracketexp: LBRACK exp RBRACK

   11 multibrackets: LBRACK RBRACK
   12              | multibrackets LBRACK RBRACK

   13 name: THIS
   14     | ID
   15     | name DOT ID
   16     | name bracketexps


Terminals, with rules where they appear

$end (0) 0
error (256)
THIS (258) 13
ID (259) 14 15
DOT (260) 15
LBRACK (261) 10 11 12
RBRACK (262) 10 11 12
NUMBER (263) 5
INT (264) 7
BRACK (265)


Nonterminals, with rules where they appear

$accept (11)
    on left: 0
program (12)
    on left: 1 2 3, on right: 0
exp (13)
    on left: 4 5, on right: 2 10
type (14)
    on left: 6, on right: 3
simpletype (15)
    on left: 7, on right: 6
bracketexps (16)
    on left: 8 9, on right: 9 16
bracketexp (17)
    on left: 10, on right: 8 9
multibrackets (18)
    on left: 11 12, on right: 1 12
name (19)
    on left: 13 14 15 16, on right: 4 15 16


State 0

    0 $accept: . program $end

    THIS    shift, and go to state 1
    ID      shift, and go to state 2
    LBRACK  shift, and go to state 3
    NUMBER  shift, and go to state 4
    INT     shift, and go to state 5

    program        go to state 6
    exp            go to state 7
    type           go to state 8
    simpletype     go to state 9
    multibrackets  go to state 10
    name           go to state 11


State 1

   13 name: THIS .

    $default  reduce using rule 13 (name)


State 2

   14 name: ID .

    $default  reduce using rule 14 (name)


State 3

   11 multibrackets: LBRACK . RBRACK

    RBRACK  shift, and go to state 12


State 4

    5 exp: NUMBER .

    $default  reduce using rule 5 (exp)


State 5

    7 simpletype: INT .

    $default  reduce using rule 7 (simpletype)


State 6

    0 $accept: program . $end

    $end  shift, and go to state 13


State 7

    2 program: exp .

    $default  reduce using rule 2 (program)


State 8

    3 program: type .

    $default  reduce using rule 3 (program)


State 9

    6 type: simpletype .

    $default  reduce using rule 6 (type)


State 10

    1 program: multibrackets .
   12 multibrackets: multibrackets . LBRACK RBRACK

    LBRACK  shift, and go to state 14

    $default  reduce using rule 1 (program)


State 11

    4 exp: name .
   15 name: name . DOT ID
   16     | name . bracketexps

    DOT     shift, and go to state 15
    LBRACK  shift, and go to state 16

    $default  reduce using rule 4 (exp)

    bracketexps  go to state 17
    bracketexp   go to state 18


State 12

   11 multibrackets: LBRACK RBRACK .

    $default  reduce using rule 11 (multibrackets)


State 13

    0 $accept: program $end .

    $default  accept


State 14

   12 multibrackets: multibrackets LBRACK . RBRACK

    RBRACK  shift, and go to state 19


State 15

   15 name: name DOT . ID

    ID  shift, and go to state 20


State 16

   10 bracketexp: LBRACK . exp RBRACK

    THIS    shift, and go to state 1
    ID      shift, and go to state 2
    NUMBER  shift, and go to state 4

    exp   go to state 21
    name  go to state 11


State 17

    9 bracketexps: bracketexps . bracketexp
   16 name: name bracketexps .

    LBRACK  shift, and go to state 16

    $default  reduce using rule 16 (name)

    bracketexp  go to state 22


State 18

    8 bracketexps: bracketexp .

    $default  reduce using rule 8 (bracketexps)


State 19

   12 multibrackets: multibrackets LBRACK RBRACK .

    $default  reduce using rule 12 (multibrackets)


State 20

   15 name: name DOT ID .

    $default  reduce using rule 15 (name)


State 21

   10 bracketexp: LBRACK exp . RBRACK

    RBRACK  shift, and go to state 23


State 22

    9 bracketexps: bracketexps bracketexp .

    $default  reduce using rule 9 (bracketexps)


State 23

   10 bracketexp: LBRACK exp RBRACK .

    $default  reduce using rule 10 (bracketexp)
