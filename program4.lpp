%{
/*
 * program4.lpp
 * Finley McIlwaine
 * Nov. 10, 2019
 * COSC4785, Program 4
 *
 * Flex input file
*/
#include<string>
#include<iostream>
#include "MyScanner.hpp"
#include "Node.hpp"
#include "program4.tab.hpp"

using std::string;
using std::cout;
using std::endl;
using std::cerr;

Error* error=new Error();
string errLine;
int errCol;
%}

%option outfile="program4_lex.cpp"
%option yylineno
%option noyywrap
%option yyclass="MyScanner"

%x C_COMMENT
%x CPP_COMMENT
%x ERROR
%x READ_LN
%x EOF_CHECK

%%
  /* C-style comment stuff */
\/\* {
  BEGIN(C_COMMENT);
  read(yytext);
}
<C_COMMENT>\n {
  lines.push_back(line);
  errLine="";
  line="";
  columnNumber=1;
  lineNumber++;
}
<C_COMMENT>\t {
  line+="\t";
  columnNumber+=9-(columnNumber%8);
}
<C_COMMENT>. {
  read(yytext);
}
<C_COMMENT>"*/" {
  read(yytext);
  BEGIN(0);
}
  /* CPP-style comment stuff */
"//" {
  read(yytext);
  BEGIN(CPP_COMMENT);
}
<CPP_COMMENT>\t {
  line+="\t";
  columnNumber+=9-(columnNumber%8);
}
<CPP_COMMENT>[^\n] {
  read(yytext);
}
<CPP_COMMENT>\n {
  lines.push_back(line);
  line="";
  columnNumber=1;
  lineNumber++;
  errLine="";
  BEGIN(0);
}
  /* basic terminals */
"this" {
  read(yytext);
  return THIS;
}
"." {
  read(yytext);
  return DOT;
}
"[" {
  read(yytext);
  return LBRACK;
}
"]" {
  read(yytext);
  return RBRACK;
}
"(" {
  read(yytext);
  return LPAREN;
}
")" {
  read(yytext);
  return RPAREN;
}
[0-9]+ {
  read(yytext);
  string num(yytext);
  // Make a new node so we can print it
  yylval.pnode=new NumberNode();
  yylval.pnode->setVal(num);
  return NUMBER;
}
"int" {
  read(yytext);
  return INT;
}
"new" {
  read(yytext);
  return NEW;
}
"read" {
  read(yytext);
  return READ;
}
"null" {
  read(yytext);
  return NULLT;
}
"!=" {
  read(yytext);
  return NE;
}
"==" {
  read(yytext);
  return EQ;
}
"<" {
  read(yytext);
  return LT;
}
">" {
  read(yytext);
  return GT;
}
"<=" {
  read(yytext);
  return LE;
}
">=" {
  read(yytext);
  return GE;
}
"&&" {
  read(yytext);
  return AND;
}
"||" {
  read(yytext);
  return OR;
}
"!" {
  read(yytext);
  return NOT;
}
"+" {
  read(yytext);
  return PLUS;
}
"-" {
  read(yytext);
  return MINUS;
}
"*" {
  read(yytext);
  return TIMES;
}
"/" {
  read(yytext);
  return DIV;
}
"%" {
  read(yytext);
  return MOD;
}
";" {
  read(yytext);
  return SEMI;
}
[_a-zA-Z]+[_0-9a-zA-Z]* {
  read(yytext);
  string id(yytext);
  // Make a new node so we can print it
  yylval.pnode=new IdNode();
  yylval.pnode->setVal(id);
  return ID;
}
[ ]	{
  line+=" ";
  columnNumber++;
}
\t {
  line+="\t";
  columnNumber+=9-(columnNumber%8);
}
\n {
  BEGIN(EOF_CHECK);
  lines.push_back(line);
  line="";
  columnNumber=1;
  lineNumber++;
  yylloc.first_line=lineNumber;
  errLine="";
}
<EOF_CHECK>[^<<EOF>>] { 
  yyless(0);
  BEGIN(0); 
}

<EOF_CHECK><<EOF>> { 
  yylloc.first_line--; 
  return 0;
}

	/* unrecognized character and error states */
. {
  error->withColNumber(columnNumber)->withLineNumber(lineNumber);
  BEGIN(READ_LN);
  errCol=columnNumber;
  yymore();
}
<ERROR>[0-9a-zA-Z]+ {
  yymore();
}
<ERROR>[ \t\n\[\]\{\}=<>!*+/%;,().-] {
  BEGIN(0);
  //yyless(yyleng-1);
  read(yytext);
  if (yyleng>1)
  {
    // word error
    error->withDesc("Word error");
  }
  else 
  {
    // invalid character
    error->withDesc("Character error");
  }
  error->print();
}
<ERROR>"//"|"||"|"&&" {
  BEGIN(0);
  yyless(yyleng-2);
  read(yytext);
  if (yyleng>1)
  {
    // word error
    error->withDesc("Word error");
  }
  else
  {
    // invalid character
    error->withDesc("Character error");
  }
  error->print();
}
<ERROR>. {
  yymore();
}

<READ_LN>[^\n]* {
  yymore();
}
<READ_LN>\n {
  BEGIN(ERROR);
  yyless(yyleng-1);
  errLine=line+yytext;
  yyless(0);
  error->withErrLine(errLine);
}
%%
