// program3.ypp
// Finley McIlwaine
// COSC 4785
// Dr. Buckner
// October 27, 2019

%{

#include <iostream>
#include <FlexLexer.h>
#include "node.hpp"

using std::cout;
using std::endl;

extern Node *tree;
extern yyFlexLexer scanner;

#define yylex() scanner.yylex()

void yyerror(const char *);

%}

/*
 * El Union
 */
%union {
	Node *pnode;
}

/*
 * token stuff
 */
%type<pnode> name
%type<pnode> multibrackets
%type<pnode> bracketexps
%type<pnode> bracketexp
%type<pnode> exp
%type<pnode> type
%type<pnode> simpletype
%type<pnode> newexp

%token<pnode> THIS 
%token<pnode> ID 
%token<pnode> DOT
%token<pnode> LBRACK
%token<pnode> RBRACK
%token<pnode> NUMBER
%token<pnode> INT
%token<pnode> NEW
%token<pnode> LPAREN
%token<pnode> RPAREN
%token<pnode> READ
%token<pnode> NULLT

%precedence BRACK
%precedence LBRACK

/*
 * The Grammar :o
 */
%%
program: 		multibrackets { tree=$1; }
				| exp { tree=$1; }
				| type { tree=$1; }
				| newexp { tree=$1; }
; /* do not ever even think about forgetting this stupid thing */ 

exp:			name {
					$$=new ExpNode($1);
					$$->setVal("<name>");
}
				| NUMBER {
					$1=new NumberNode();
					$1->setVal(scanner.YYText());
					$$=new ExpNode($1);
					$$->setVal("NUMBER");
}
				| NULLT {
					$$=new ExpNode();
					$$->setVal("NULL");
}
				| READ LPAREN RPAREN {
					$$=new ExpNode();
					$$->setVal("READ LPAREN RPAREN");
}

newexp:			NEW ID LPAREN RPAREN {
					$$=new NewExpNode();
					$$->setVal("NEW ID LPAREN RPAREN");
}
				| NEW simpletype {
					$$=new NewExpNode($2);
					$$->setVal("NEW <simpletype>");
}
				| NEW simpletype bracketexps {
					$$=new NewExpNode($2,$3);
					$$->setVal("NEW <simpletype> <bracketexps>");
}
				| NEW ID bracketexps {
					$1=new IdNode();
					$1->setVal(scanner.YYText());
					$$=new NewExpNode($1,$2);
					$$->setVal("NEW ID <bracketexps>");
}
				| NEW simpletype bracketexps multibrackets {
					$$=new NewExpNode($2,$3,$4);
					$$->setVal("NEW <simpletype> <bracketexps> <multibrackets>");
}
				| NEW ID bracketexps multibrackets {
					$$=new NewExpNode($3,$4);
					$$->setVal("NEW <simpletype> <bracketexps> <multibrackets>");
}
					

type:			simpletype {
					$$=new TypeNode($1);
					$$->setVal("<simpletype>");
}

simpletype:		INT {
					$$=new SimpleTypeNode();
					$$->setVal("INT");
}

bracketexps:	bracketexp {
					$$=new BracketExpsNode($1);
					$$->setVal("<bracketexp>");
}
				| bracketexps bracketexp {
					$$=new BracketExpsNode($1,$2);
					$$->setVal("<bracketexps> <bracketexp>");
}

bracketexp:		LBRACK exp RBRACK {
					$$=new BracketExpNode($2);
					$$->setVal("LBRACK <exp> RBRACK");
}

/* Matches "[]"* */
multibrackets:	LBRACK RBRACK {
					$$=new MultibracketNode();
					$$->setVal("LBRACK RBRACK");
}
				| multibrackets LBRACK RBRACK {
					$$=new MultibracketNode($1);
					$$->setVal("<multibrackets> LBRACK RBRACK");
}

/* Matches this, an id, id.id, name bracketexps */
name: 			THIS {
					$$=new NameNode($1); 
					$$->setVal("THIS");
}
				| ID {
					/* Make an ID node that will be the child of the NameNode */
					$1=new IdNode();
					$1->setVal(scanner.YYText());
					$$=new NameNode($1);
					$$->setVal("ID");
}
				| name DOT ID {
					/* Make an ID node to be the child of this name node */
					$3=new IdNode();
					$3->setVal(scanner.YYText());
					$$=new NameNode($1,$3);
					$$->setVal("<name> DOT ID");
}
				| name bracketexps %prec BRACK {
					$$=new NameNode($1,$2);
					$$->setVal("<name> <bracketexps>");
}

;

%%
