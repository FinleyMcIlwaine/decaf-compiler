// program3.ypp
// Finley McIlwaine
// COSC 4785
// Dr. Buckner
// October 27, 2019

%{

  #include <iostream>
  #include "MyScanner.hpp"
  #include "node.hpp"

  using std::cout;
  using std::endl;
  using std::cerr;

  extern Node *tree;
  extern MyScanner scanner;

  #define yylex() scanner.yylex()

  void yyerror(const char *);
%}

  /*
   * El Union
   */
  %union {
    Node *pnode;
  }

/*
 * token stuff
 */
%type<pnode> name
%type<pnode> multibrackets
%type<pnode> bracketexps
%type<pnode> bracketexp
%type<pnode> exp
%type<pnode> type
%type<pnode> simpletype
%type<pnode> newexp
%type<pnode> vardec
%type<pnode> elements
%type<pnode> program

%token<pnode> THIS 
%token<pnode> ID 
%token<pnode> DOT
%token<pnode> LBRACK
%token<pnode> RBRACK
%token<pnode> NUMBER
%token<pnode> INT
%token<pnode> NEW
%token<pnode> LPAREN
%token<pnode> RPAREN
%token<pnode> READ
%token<pnode> NULLT
%token<pnode> PLUS
%token<pnode> MINUS
%token<pnode> OR
%token<pnode> TIMES
%token<pnode> DIV
%token<pnode> MOD
%token<pnode> AND
%token<pnode> EQ
%token<pnode> NE
%token<pnode> GE
%token<pnode> LE
%token<pnode> GT
%token<pnode> LT
%token<pnode> NOT
%token<pnode> SEMI

%precedence UOP

%left PLUS MINUS OR
%left TIMES DIV MOD AND
%left EQ NE GE LE GT LT

%precedence BRACK
%precedence LBRACK

/*
 * The Grammar :o
 */
%%
input: program {
  tree=new Node($1);
}

;

program: elements {
  $$=new ProgramNode($1);
  $$->setVal("<elements>");
}
| program elements {
  $$=new ProgramNode($1,$2);
  $$->setVal("<program> <elements>");
}

; /* do not ever even think about forgetting this stupid thing */ 

elements: vardec {
  $$=new ElementsNode($1);
  $$->setVal("<vardec>");
}
| exp SEMI {
  $$=new ElementsNode($1);
  $$->setVal("<exp> SEMI");
}

;

vardec: type ID SEMI {
  $$=new VarDecNode($1,$2);
  $$->setVal("<type> ID SEMI");
}
| ID ID SEMI {
  $$=new VarDecNode($1,$2);
  $$->setVal("ID ID SEMI");
}
| type multibrackets ID SEMI {
  $$=new VarDecNode($1,$2,$3);
  $$->setVal("<type> <multibrackets> ID SEMI");
}
| ID multibrackets ID SEMI {
  $$=new VarDecNode($1,$2,$3);
  $$->setVal("ID <multibrackets> ID SEMI");
}

;

exp: name {
  $$=new ExpNode($1);
  $$->setVal("<name>");
}
| NUMBER {
  $$=new ExpNode($1);
  $$->setVal("NUMBER");
}
| NULLT {
  $$=new ExpNode();
  $$->setVal("NULL");
}
| READ LPAREN RPAREN {
  $$=new ExpNode();
  $$->setVal("READ LPAREN RPAREN");
}
| newexp {
  $$=new ExpNode($1);
  $$->setVal("<newexp>");
}
| LPAREN exp RPAREN {
  $$=new ExpNode($2);
  $$->setVal("LPAREN <exp> RPAREN");
}
| name LPAREN RPAREN {
  $$=new ExpNode($1);
  $$->setVal("<name> LPAREN RPAREN");
}
/* SUM OPERATORS */
| exp PLUS exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> PLUS <exp>");
}
| exp MINUS exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> MINUS <exp>");
}
| exp OR exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> OR <exp>");
}
| exp TIMES exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> TIMES <exp>");
}
| exp DIV exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> DIV <exp>");
}
| exp MOD exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> MOD <exp>");
}
| exp AND exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> AND <exp>");
}

/* RELATION OPERATORS */
| exp EQ exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> EQ <exp>");
}
| exp NE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> NE <exp>");
}
| exp GE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> GE <exp>");
}
| exp LE exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> LE <exp>");
}
| exp GT exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> GT <exp>");
}
| exp LT exp {
  $$=new ExpNode($1,$3);
  $$->setVal("<exp> LT <exp>");
}

/* UNARY OPERATORS */
| MINUS exp %prec UOP {
  $$=new ExpNode($2);
  $$->setVal("MINUS <exp>");
}
| PLUS exp %prec UOP {
  $$=new ExpNode($2);
  $$->setVal("PLUS <exp>");
}
| NOT exp %prec UOP {
  $$=new ExpNode($2);
  $$->setVal("NOT <exp>");
}

;

newexp: NEW ID LPAREN RPAREN {
  $$=new NewExpNode($2);
  $$->setVal("NEW ID LPAREN RPAREN");
}
| NEW simpletype {
  $$=new NewExpNode($2);
  $$->setVal("NEW <simpletype>");
}
| NEW simpletype bracketexps {
  $$=new NewExpNode($2,$3);
  $$->setVal("NEW <simpletype> <bracketexps>");
}
| NEW ID bracketexps {
  $$=new NewExpNode($2,$3);
  $$->setVal("NEW ID <bracketexps>");
}
| NEW simpletype bracketexps multibrackets {
  $$=new NewExpNode($2,$3,$4);
  $$->setVal("NEW <simpletype> <bracketexps> <multibrackets>");
}
| NEW ID bracketexps multibrackets {
  $$=new NewExpNode($2,$3,$4);
  $$->setVal("NEW <simpletype> <bracketexps> <multibrackets>");
}

;

type: simpletype {
  $$=new TypeNode($1);
  $$->setVal("<simpletype>");
}

;

simpletype: INT {
  $$=new SimpleTypeNode();
  $$->setVal("INT");
}

;

bracketexps: bracketexp {
  $$=new BracketExpsNode($1);
  $$->setVal("<bracketexp>");
}
| bracketexps bracketexp {
  $$=new BracketExpsNode($1,$2);
  $$->setVal("<bracketexps> <bracketexp>");
}

;

bracketexp: LBRACK exp RBRACK {
  $$=new BracketExpNode($2);
  $$->setVal("LBRACK <exp> RBRACK");
}

;

multibrackets: LBRACK RBRACK {
  $$=new MultibracketNode();
  $$->setVal("LBRACK RBRACK");
}
| multibrackets LBRACK RBRACK {
  $$=new MultibracketNode($1);
  $$->setVal("<multibrackets> LBRACK RBRACK");
}

;

name: THIS {
  $$=new NameNode($1); 
  $$->setVal("THIS");
}
| ID %prec BRACK {
  $$=new NameNode($1);
  $$->setVal("ID");
}
| name DOT ID {
  $$=new NameNode($1,$3);
  $$->setVal("<name> DOT ID");
}
| name bracketexps %prec BRACK { 
  $$=new NameNode($1,$2);
  $$->setVal("<name> <bracketexps>");
}
| ID bracketexps %prec BRACK {
  $$=new NameNode($1,$2);
  $$->setVal("<name> <bracketexps>");
}
;

%%
